This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-29T22:26:53.291Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  AppBuilder.java
  Main.java
data_access/
  DBUserDataAccessObject.java
  FileUserDataAccessObject.java
  FoodDatabaseAccessObject.java
  InMemoryUserDataAccessObject.java
  RecipeSearchDataAccessObject.java
entity/
  Allergy.java
  CommonUser.java
  CommonUserFactory.java
  Food.java
  MealType.java
  User.java
  UserFactory.java
interface_adapter/
  change_password/
    ChangePasswordController.java
    ChangePasswordPresenter.java
    LoggedInState.java
    LoggedInViewModel.java
  dashboard/
    DashboardController.java
    DashboardPresenter.java
    DashboardState.java
    DashboardViewModel.java
  info_collection/
    InfoCollectionController.java
    InfoCollectionPresenter.java
    InfoCollectionState.java
    InfoCollectionViewModel.java
  login/
    LoginController.java
    LoginPresenter.java
    LoginState.java
    LoginViewModel.java
  logout/
    LogoutController.java
    LogoutPresenter.java
  signup/
    SignupController.java
    SignupPresenter.java
    SignupState.java
    SignupViewModel.java
  ViewManagerModel.java
  ViewModel.java
use_case/
  change_password/
    ChangePasswordInputBoundary.java
    ChangePasswordInputData.java
    ChangePasswordInteractor.java
    ChangePasswordOutputBoundary.java
    ChangePasswordOutputData.java
    ChangePasswordUserDataAccessInterface.java
  dashboard/
    DashboardDataAccessInterface.java
    DashboardInputBoundary.java
    DashboardInputData.java
    DashboardInteractor.java
    DashboardOutputBoundary.java
    DashboardOutputData.java
  info_collection/
    InfoCollectionInputBoundary.java
    InfoCollectionInputData.java
    InfoCollectionInteractor.java
    InfoCollectionOutputBoundary.java
    InfoCollectionOutputData.java
    InfoCollectionUserDataAccessInterface.java
  login/
    LoginInputBoundary.java
    LoginInputData.java
    LoginInteractor.java
    LoginOutputBoundary.java
    LoginOutputData.java
    LoginUserDataAccessInterface.java
  logout/
    LogoutInputBoundary.java
    LogoutInputData.java
    LogoutInteractor.java
    LogoutOutputBoundary.java
    LogoutOutputData.java
    LogoutUserDataAccessInterface.java
  signup/
    SignupInputBoundary.java
    SignupInputData.java
    SignupInteractor.java
    SignupOutputBoundary.java
    SignupOutputData.java
    SignupUserDataAccessInterface.java
util/
  ApiConfig.java
view/
  DashboardView.java
  InfoCollectionView.java
  LabelTextPanel.java
  LoggedInView.java
  LoginView.java
  NutritionGraphPanel.java
  NutritionProgressPanel.java
  SignupView.java
  ViewManager.java

================================================================
Repository Files
================================================================

================
File: app/AppBuilder.java
================
package app;

import java.awt.*;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

import data_access.InMemoryUserDataAccessObject;
import entity.CommonUserFactory;
import entity.UserFactory;
import interface_adapter.ViewManagerModel;
import interface_adapter.change_password.ChangePasswordController;
import interface_adapter.change_password.ChangePasswordPresenter;
import interface_adapter.change_password.LoggedInViewModel;
import interface_adapter.login.LoginController;
import interface_adapter.login.LoginPresenter;
import interface_adapter.login.LoginViewModel;
import interface_adapter.logout.LogoutController;
import interface_adapter.logout.LogoutPresenter;
import interface_adapter.signup.SignupController;
import interface_adapter.signup.SignupPresenter;
import interface_adapter.signup.SignupViewModel;
import use_case.change_password.ChangePasswordInputBoundary;
import use_case.change_password.ChangePasswordInteractor;
import use_case.change_password.ChangePasswordOutputBoundary;
import use_case.dashboard.DashboardDataAccessInterface;
import use_case.dashboard.DashboardInputBoundary;
import use_case.dashboard.DashboardInteractor;
import use_case.dashboard.DashboardOutputBoundary;
import use_case.login.LoginInputBoundary;
import use_case.login.LoginInteractor;
import use_case.login.LoginOutputBoundary;
import use_case.logout.LogoutInputBoundary;
import use_case.logout.LogoutInteractor;
import use_case.logout.LogoutOutputBoundary;
import use_case.signup.SignupInputBoundary;
import use_case.signup.SignupInteractor;
import use_case.signup.SignupOutputBoundary;
import view.*;
import interface_adapter.info_collection.*;
import interface_adapter.dashboard.*;
import use_case.info_collection.*;


/**
 * The AppBuilder class is responsible for putting together the pieces of
 * our CA architecture; piece by piece.
 * <p/>
 * This is done by adding each View and then adding related Use Cases.
 */
// Checkstyle note: you can ignore the "Class Data Abstraction Coupling"
//                  and the "Class Fan-Out Complexity" issues for this lab; we encourage
//                  your team to think about ways to refactor the code to resolve these
//                  if your team decides to work with this as your starter code
//                  for your final project this term.
public class AppBuilder {
    private final JPanel cardPanel = new JPanel();
    private final CardLayout cardLayout = new CardLayout();
    // thought question: is the hard dependency below a problem?
    private final UserFactory userFactory = new CommonUserFactory();
    private final ViewManagerModel viewManagerModel = new ViewManagerModel();
    private final ViewManager viewManager = new ViewManager(cardPanel, cardLayout, viewManagerModel);

    // thought question: is the hard dependency below a problem?
    private final InMemoryUserDataAccessObject userDataAccessObject = new InMemoryUserDataAccessObject();

    private SignupView signupView;
    private SignupViewModel signupViewModel;
    private LoginViewModel loginViewModel;
    private LoggedInViewModel loggedInViewModel;
    private LoggedInView loggedInView;
    private LoginView loginView;
    private InfoCollectionView infoCollectionView;
    private InfoCollectionViewModel infoCollectionViewModel;
    private DashboardView dashboardView;
    private DashboardViewModel dashboardViewModel;
    private DashboardController dashboardController;

    public AppBuilder() {
        cardPanel.setLayout(cardLayout);
    }

    /**
     * Adds the Signup View to the application.
     * @return this builder
     */
    public AppBuilder addSignupView() {
        signupViewModel = new SignupViewModel();
        signupView = new SignupView(signupViewModel);
        cardPanel.add(signupView, signupView.getViewName());
        return this;
    }

    /**
     * Adds the Login View to the application.
     * @return this builder
     */
    public AppBuilder addLoginView() {
        loginViewModel = new LoginViewModel();
        loginView = new LoginView(loginViewModel, viewManagerModel);
        cardPanel.add(loginView, loginView.getViewName());
        return this;
    }

    /**
     * Adds the LoggedIn View to the application.
     * @return this builder
     */
    public AppBuilder addLoggedInView() {
        loggedInViewModel = new LoggedInViewModel();
        loggedInView = new LoggedInView(loggedInViewModel);
        cardPanel.add(loggedInView, loggedInView.getViewName());
        return this;
    }

    /**
     * Adds the Signup Use Case to the application.
     * @return this builder
     */
    public AppBuilder addSignupUseCase() {
        final SignupOutputBoundary signupOutputBoundary = new SignupPresenter(viewManagerModel,
                signupViewModel, loginViewModel, infoCollectionViewModel);
        final SignupInputBoundary userSignupInteractor = new SignupInteractor(
                userDataAccessObject, signupOutputBoundary, userFactory);


        SignupController controller = new SignupController(userSignupInteractor);
        signupView.setSignupController(controller);
        return this;
    }

    /**
     * Adds the Login Use Case to the application.
     * @return this builder
     */
//    public AppBuilder addLoginUseCase() {
//        final LoginOutputBoundary loginOutputBoundary = new LoginPresenter(viewManagerModel,
//                loggedInViewModel, loginViewModel, infoCollectionViewModel);
//
//        final LoginInputBoundary loginInteractor = new LoginInteractor(
//                userDataAccessObject, loginOutputBoundary);
//
//        final LoginController loginController = new LoginController(loginInteractor);
//        loginView.setLoginController(loginController);
//        return this;
//    }
    public AppBuilder addLoginUseCase() {
        final LoginOutputBoundary loginOutputBoundary = new LoginPresenter(
                viewManagerModel,
                loggedInViewModel,
                loginViewModel,
                infoCollectionViewModel,
                dashboardViewModel  // Add this parameter
        );

        final LoginInputBoundary loginInteractor = new LoginInteractor(
                userDataAccessObject,
                loginOutputBoundary
        );

        final LoginController loginController = new LoginController(loginInteractor);
        loginView.setLoginController(loginController);
        return this;
    }

    /**
     * Adds the Change Password Use Case to the application.
     * @return this builder
     */
//    public AppBuilder addChangePasswordUseCase() {
//        final ChangePasswordOutputBoundary changePasswordOutputBoundary =
//                new ChangePasswordPresenter(loggedInViewModel);
//
//        final ChangePasswordInputBoundary changePasswordInteractor =
//                new ChangePasswordInteractor(userDataAccessObject, changePasswordOutputBoundary, userFactory);
//
//        final ChangePasswordController changePasswordController =
//                new ChangePasswordController(changePasswordInteractor);
//        loggedInView.setChangePasswordController(changePasswordController);
//        return this;
//    }

    /**
     * Adds the Logout Use Case to the application.
     * @return this builder
     */
    public AppBuilder addLogoutUseCase() {
        LogoutOutputBoundary logoutOutputBoundary = new LogoutPresenter(viewManagerModel,
                loggedInViewModel, loginViewModel);

        LogoutInputBoundary logoutInteractor = new LogoutInteractor(userDataAccessObject, logoutOutputBoundary);

        LogoutController logoutController = new LogoutController(logoutInteractor);
        loggedInView.setLogoutController(logoutController);
        dashboardView.setLogoutController(logoutController); // Add this line to connect logout to dashboard

        return this;
    }

    public AppBuilder addInfoCollectionView() {
        infoCollectionViewModel = new InfoCollectionViewModel();
        dashboardViewModel = new DashboardViewModel();  // Initialize dashboard view model
        infoCollectionView = new InfoCollectionView(infoCollectionViewModel, viewManagerModel);
        cardPanel.add(infoCollectionView, infoCollectionView.getViewName());
        return this;
    }


    /**
     * Creates the JFrame for the application and initially sets the SignupView to be displayed.
     * @return the application
     */
//    public JFrame build() {
//        final JFrame application = new JFrame("Login Example");
//        application.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
//
//        application.add(cardPanel);
//
//        viewManagerModel.setState(signupView.getViewName());
//        viewManagerModel.firePropertyChanged();
//
//        return application;
//    }

//    public JFrame build() {
//        final JFrame application = new JFrame("Meal Planner");
//        application.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
//        application.add(cardPanel);
//        application.setMinimumSize(new Dimension(800, 600));  // Set minimum window size
//        viewManagerModel.setActiveView(signupView.getViewName());
//        viewManagerModel.firePropertyChanged();
//        return application;
//    }

    public AppBuilder addDashboardView() {
        dashboardViewModel = new DashboardViewModel();
        dashboardView = new DashboardView(dashboardViewModel);
        cardPanel.add(dashboardView, dashboardView.getViewName());
        return this;
    }

    public AppBuilder addDashboardUseCase() {
        DashboardOutputBoundary outputBoundary = new DashboardPresenter(
                viewManagerModel,
                dashboardViewModel,
                infoCollectionViewModel
        );

        DashboardDataAccessInterface userDataAccessObject =
                (DashboardDataAccessInterface) this.userDataAccessObject;

        DashboardInputBoundary interactor = new DashboardInteractor(
                userDataAccessObject,
                outputBoundary
        );

        dashboardController = new DashboardController(interactor);
        dashboardView.setDashboardController(dashboardController);
        return this;
    }

    // Make sure InfoCollectionView can transition to Dashboard
    public AppBuilder addInfoCollectionUseCase() {
        InfoCollectionOutputBoundary outputBoundary = new InfoCollectionPresenter(
                viewManagerModel,
                infoCollectionViewModel,
                dashboardViewModel  // Pass dashboardViewModel
        );

        InfoCollectionInputBoundary infoCollectionInteractor = new InfoCollectionInteractor(
                (InfoCollectionUserDataAccessInterface) userDataAccessObject,
                outputBoundary,
                userFactory
        );

        InfoCollectionController controller = new InfoCollectionController(infoCollectionInteractor);
        infoCollectionView.setInfoCollectionController(controller);
        return this;
    }


    // Update the build method to support the new sizing
    public JFrame build() {
        JFrame application = new JFrame("Food Planner");
        application.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        application.add(cardPanel);

        // Set minimum size to accommodate the dashboard
        application.setMinimumSize(new Dimension(800, 600));

        viewManagerModel.setActiveView(signupView.getViewName());
        viewManagerModel.firePropertyChanged();

        return application;
    }
}

================
File: app/Main.java
================
package app;

import javax.swing.JFrame;
import java.awt.*;

/**
 * The Main class of our application.
 */
public class Main {
    /**
     * Builds and runs the CA architecture of the application.
     * @param args unused arguments
     */
    public static void main(String[] args) {
        final AppBuilder appBuilder = new AppBuilder();
        final JFrame application = appBuilder
                .addSignupView()
                .addLoginView()
                .addInfoCollectionView()
                .addDashboardView()
                .addLoggedInView()

                .addSignupUseCase()
                .addLoginUseCase()
                .addInfoCollectionUseCase()
                .addDashboardUseCase()
//                .addChangePasswordUseCase()
                .addLogoutUseCase()
                .build();

        application.setMinimumSize(new Dimension(800, 600));
        application.pack();
        application.setLocationRelativeTo(null);
        application.setVisible(true);
    }
}

================
File: data_access/DBUserDataAccessObject.java
================
package data_access;

import java.io.IOException;

import org.json.JSONException;
import org.json.JSONObject;

import entity.User;
import entity.UserFactory;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import use_case.change_password.ChangePasswordUserDataAccessInterface;
import use_case.login.LoginUserDataAccessInterface;
import use_case.logout.LogoutUserDataAccessInterface;
import use_case.signup.SignupUserDataAccessInterface;

/**
 * The DAO for user data.
 */
public class DBUserDataAccessObject implements SignupUserDataAccessInterface,
        LoginUserDataAccessInterface,
        ChangePasswordUserDataAccessInterface,
        LogoutUserDataAccessInterface {
    private static final int SUCCESS_CODE = 200;
    private static final String CONTENT_TYPE_LABEL = "Content-Type";
    private static final String CONTENT_TYPE_JSON = "application/json";
    private static final String STATUS_CODE_LABEL = "status_code";
    private static final String USERNAME = "username";
    private static final String PASSWORD = "password";
    private static final String MESSAGE = "message";
    private final UserFactory userFactory;

    public DBUserDataAccessObject(UserFactory userFactory) {
        this.userFactory = userFactory;
        // No need to do anything to reinitialize a user list! The data is the cloud that may be miles away.
    }

    @Override
    public User get(String username) {
        // Make an API call to get the user object.
        final OkHttpClient client = new OkHttpClient().newBuilder().build();
        final Request request = new Request.Builder()
                .url(String.format("http://vm003.teach.cs.toronto.edu:20112/user?username=%s", username))
                .addHeader("Content-Type", CONTENT_TYPE_JSON)
                .build();
        try {
            final Response response = client.newCall(request).execute();

            final JSONObject responseBody = new JSONObject(response.body().string());

            if (responseBody.getInt(STATUS_CODE_LABEL) == SUCCESS_CODE) {
                final JSONObject userJSONObject = responseBody.getJSONObject("user");
                final String name = userJSONObject.getString(USERNAME);
                final String password = userJSONObject.getString(PASSWORD);

                return userFactory.create(name, password);
            }
            else {
                throw new RuntimeException(responseBody.getString(MESSAGE));
            }
        }
        catch (IOException | JSONException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public void setCurrentUsername(String name) {
        // this isn't implemented for the lab
    }

    @Override
    public boolean existsByName(String username) {
        final OkHttpClient client = new OkHttpClient().newBuilder()
                .build();
        final Request request = new Request.Builder()
                .url(String.format("http://vm003.teach.cs.toronto.edu:20112/checkIfUserExists?username=%s", username))
                .addHeader(CONTENT_TYPE_LABEL, CONTENT_TYPE_JSON)
                .build();
        try {
            final Response response = client.newCall(request).execute();

            final JSONObject responseBody = new JSONObject(response.body().string());

            return responseBody.getInt(STATUS_CODE_LABEL) == SUCCESS_CODE;
        }
        catch (IOException | JSONException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public void save(User user) {
        final OkHttpClient client = new OkHttpClient().newBuilder()
                .build();

        // POST METHOD
        final MediaType mediaType = MediaType.parse(CONTENT_TYPE_JSON);
        final JSONObject requestBody = new JSONObject();
        requestBody.put(USERNAME, user.getName());
        requestBody.put(PASSWORD, user.getPassword());
        final RequestBody body = RequestBody.create(requestBody.toString(), mediaType);
        final Request request = new Request.Builder()
                .url("http://vm003.teach.cs.toronto.edu:20112/user")
                .method("POST", body)
                .addHeader(CONTENT_TYPE_LABEL, CONTENT_TYPE_JSON)
                .build();
        try {
            final Response response = client.newCall(request).execute();

            final JSONObject responseBody = new JSONObject(response.body().string());

            if (responseBody.getInt(STATUS_CODE_LABEL) == SUCCESS_CODE) {
                // success!
            }
            else {
                throw new RuntimeException(responseBody.getString(MESSAGE));
            }
        }
        catch (IOException | JSONException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public void changePassword(User user) {
        final OkHttpClient client = new OkHttpClient().newBuilder()
                .build();

        // POST METHOD
        final MediaType mediaType = MediaType.parse(CONTENT_TYPE_JSON);
        final JSONObject requestBody = new JSONObject();
        requestBody.put(USERNAME, user.getName());
        requestBody.put(PASSWORD, user.getPassword());
        final RequestBody body = RequestBody.create(requestBody.toString(), mediaType);
        final Request request = new Request.Builder()
                .url("http://vm003.teach.cs.toronto.edu:20112/user")
                .method("PUT", body)
                .addHeader(CONTENT_TYPE_LABEL, CONTENT_TYPE_JSON)
                .build();
        try {
            final Response response = client.newCall(request).execute();

            final JSONObject responseBody = new JSONObject(response.body().string());

            if (responseBody.getInt(STATUS_CODE_LABEL) == SUCCESS_CODE) {
                // success!
            }
            else {
                throw new RuntimeException(responseBody.getString(MESSAGE));
            }
        }
        catch (IOException | JSONException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public String getCurrentUsername() {
        return null;
    }
}

================
File: data_access/FileUserDataAccessObject.java
================
package data_access;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import entity.User;
import entity.UserFactory;
import use_case.change_password.ChangePasswordUserDataAccessInterface;
import use_case.login.LoginUserDataAccessInterface;
import use_case.signup.SignupUserDataAccessInterface;

/**
 * DAO for user data implemented using a File to persist the data.
 */
public class FileUserDataAccessObject implements SignupUserDataAccessInterface,
                                                 LoginUserDataAccessInterface,
                                                 ChangePasswordUserDataAccessInterface {

    private static final String HEADER = "username,password";

    private final File csvFile;
    private final Map<String, Integer> headers = new LinkedHashMap<>();
    private final Map<String, User> accounts = new HashMap<>();
    private String currentUsername;

    public FileUserDataAccessObject(String csvPath, UserFactory userFactory) throws IOException {

        csvFile = new File(csvPath);
        headers.put("username", 0);
        headers.put("password", 1);

        if (csvFile.length() == 0) {
            save();
        }
        else {

            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
                final String header = reader.readLine();

                if (!header.equals(HEADER)) {
                    throw new RuntimeException(String.format("header should be%n: %s%but was:%n%s", HEADER, header));
                }

                String row;
                while ((row = reader.readLine()) != null) {
                    final String[] col = row.split(",");
                    final String username = String.valueOf(col[headers.get("username")]);
                    final String password = String.valueOf(col[headers.get("password")]);
                    final User user = userFactory.create(username, password);
                    accounts.put(username, user);
                }
            }
        }
    }

    private void save() {
        final BufferedWriter writer;
        try {
            writer = new BufferedWriter(new FileWriter(csvFile));
            writer.write(String.join(",", headers.keySet()));
            writer.newLine();

            for (User user : accounts.values()) {
                final String line = String.format("%s,%s",
                        user.getName(), user.getPassword());
                writer.write(line);
                writer.newLine();
            }

            writer.close();

        }
        catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public void save(User user) {
        accounts.put(user.getName(), user);
        this.save();
    }

    @Override
    public User get(String username) {
        return accounts.get(username);
    }

    @Override
    public void setCurrentUsername(String name) {
        this.currentUsername = name;
    }

    @Override
    public String getCurrentUsername() {
        return this.currentUsername;
    }

    @Override
    public boolean existsByName(String identifier) {
        return accounts.containsKey(identifier);
    }

    @Override
    public void changePassword(User user) {
        // Replace the User object in the map
        accounts.put(user.getName(), user);
        save();
    }
}

================
File: data_access/FoodDatabaseAccessObject.java
================
package data_access;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import org.json.JSONObject;
import org.json.JSONArray;

public class FoodDatabaseAccessObject {
    private final String APP_ID = "f4d052b7";
    private final String APP_KEY = "46cfeab6f40ed5e084106e0870f61131%09";
    private final String BASE_URL = "https://api.edamam.com/api/food-database/v2";
    private final HttpClient httpClient;

    public FoodDatabaseAccessObject() {
        this.httpClient = HttpClient.newHttpClient();
    }

    public JSONObject searchFood() throws Exception {
        String endpoint = String.format("%s/parser?app_id=%s&app_key=%s&nutrition-type=logging",
                BASE_URL, APP_ID, APP_KEY);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endpoint))
                .header("accept", "application/json")
                .GET()
                .build();

        HttpResponse<String> response = httpClient.send(request,
                HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
            throw new Exception("API request failed with status: " + response.statusCode());
        }

        return new JSONObject(response.body());
    }

    public JSONObject searchFoodWithIngredient(String ingredient) throws Exception {
        String encodedIngredient = java.net.URLEncoder.encode(ingredient, "UTF-8");
        String endpoint = String.format("%s/parser?app_id=%s&app_key=%s&nutrition-type=logging&ingr=%s",
                BASE_URL, APP_ID, APP_KEY, encodedIngredient);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endpoint))
                .header("accept", "application/json")
                .GET()
                .build();

        HttpResponse<String> response = httpClient.send(request,
                HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
            throw new Exception("API request failed with status: " + response.statusCode());
        }

        return new JSONObject(response.body());
    }

    // parse food items from response
    public void printFoodItems(JSONObject response) {
        JSONArray hints = response.getJSONArray("hints");
        for (int i = 0; i < hints.length(); i++) {
            JSONObject food = hints.getJSONObject(i).getJSONObject("food");
            System.out.println("Label: " + food.getString("label"));
            System.out.println("Category: " + food.optString("category", "N/A"));

            JSONObject nutrients = food.getJSONObject("nutrients");
            System.out.println("Nutrients:");
            System.out.println("  - ENERC_KCAL: " + nutrients.optDouble("ENERC_KCAL", 0.0));
            System.out.println("  - PROCNT: " + nutrients.optDouble("PROCNT", 0.0));
            System.out.println("  - FAT: " + nutrients.optDouble("FAT", 0.0));
            System.out.println("  - CHOCDF: " + nutrients.optDouble("CHOCDF", 0.0));
            System.out.println("--------------------");
        }
    }
}

================
File: data_access/InMemoryUserDataAccessObject.java
================
package data_access;

import java.util.HashMap;
import java.util.Map;

import entity.User;
import use_case.change_password.ChangePasswordUserDataAccessInterface;
import use_case.dashboard.DashboardDataAccessInterface;
import use_case.info_collection.InfoCollectionUserDataAccessInterface;
import use_case.login.LoginUserDataAccessInterface;
import use_case.logout.LogoutUserDataAccessInterface;
import use_case.signup.SignupUserDataAccessInterface;

/**
 * In-memory implementation of the DAO for storing user data. This implementation does
 * NOT persist data between runs of the program.
 */
public class InMemoryUserDataAccessObject implements SignupUserDataAccessInterface,
        LoginUserDataAccessInterface,
        LogoutUserDataAccessInterface,
        InfoCollectionUserDataAccessInterface,
        DashboardDataAccessInterface {

    private final Map<String, User> users = new HashMap<>();

    private final Map<String, NutritionProgress> userProgress = new HashMap<>();

    private String currentUsername;

    @Override
    public boolean existsByName(String identifier) {
        return users.containsKey(identifier);
    }

    @Override
    public void save(User user) {
        users.put(user.getName(), user);
    }

    @Override
    public User get(String username) {
        return users.get(username);
    }


    @Override
    public void setCurrentUsername(String name) {
        this.currentUsername = name;
    }

    @Override
    public String getCurrentUsername() {
        return this.currentUsername;
    }

    @Override
    public void updateNutritionProgress(String username,
                                        double consumedCalories,
                                        double consumedCarbs,
                                        double consumedProtein,
                                        double consumedFat) {
        userProgress.put(username, new NutritionProgress(
                consumedCalories, consumedCarbs, consumedProtein, consumedFat
        ));
    }

    // Helper class to store nutrition progress
    private static class NutritionProgress {
        double calories, carbs, protein, fat;

        NutritionProgress(double calories, double carbs, double protein, double fat) {
            this.calories = calories;
            this.carbs = carbs;
            this.protein = protein;
            this.fat = fat;
        }
    }
}

================
File: data_access/RecipeSearchDataAccessObject.java
================
package data_access;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import org.json.JSONObject;
import org.json.JSONArray;

public class RecipeSearchDataAccessObject {
    private final String APP_ID = "e4b60eb9";
    private final String APP_KEY = "fec8a143bf81dd902b7dfe918d81066c";
    private final String BASE_URL = "https://api.edamam.com/api/recipes/v2";
    private final HttpClient httpClient;

    public RecipeSearchDataAccessObject() {
        this.httpClient = HttpClient.newHttpClient();
    }

    // General recipe search
    public JSONObject searchRecipes(String query) throws Exception {
        String encodedQuery = java.net.URLEncoder.encode(query, "UTF-8");
        String endpoint = String.format("%s?app_id=%s&app_key=%s&type=public&q=%s",
                BASE_URL, APP_ID, APP_KEY, encodedQuery);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endpoint))
                .header("accept", "application/json")
                .GET()
                .build();

        HttpResponse<String> response = httpClient.send(request,
                HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
            throw new Exception("Recipe search failed with status: " + response.statusCode());
        }

        return new JSONObject(response.body());
    }

    // Get specific recipe by ID
    public JSONObject getRecipeById(String recipeId) throws Exception {
        String endpoint = String.format("%s/%s?app_id=%s&app_key=%s&type=public",
                BASE_URL, recipeId, APP_ID, APP_KEY);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endpoint))
                .header("accept", "application/json")
                .GET()
                .build();

        HttpResponse<String> response = httpClient.send(request,
                HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
            throw new Exception("Recipe lookup failed with status: " + response.statusCode());
        }

        return new JSONObject(response.body());
    }

    // Lookup recipes by URIs
    public JSONObject getRecipesByUris(List<String> uris) throws Exception {
        String encodedUris = java.net.URLEncoder.encode(String.join(",", uris), "UTF-8");
        String endpoint = String.format("%s/by-uri?app_id=%s&app_key=%s&type=public&uri=%s",
                BASE_URL, APP_ID, APP_KEY, encodedUris);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endpoint))
                .header("accept", "application/json")
                .GET()
                .build();

        HttpResponse<String> response = httpClient.send(request,
                HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
            throw new Exception("Recipe URI lookup failed with status: " + response.statusCode());
        }

        return new JSONObject(response.body());
    }

    // Helper method to print recipe details
    public void printRecipeDetails(JSONObject recipe) {
        System.out.println("Label: " + recipe.getString("label"));
        System.out.println("URI: " + recipe.getString("uri"));
        System.out.println("Image: " + recipe.optString("image", "No image available"));

        JSONArray ingredients = recipe.getJSONArray("ingredients");
        System.out.println("\nIngredients:");
        for (int i = 0; i < ingredients.length(); i++) {
            JSONObject ingredient = ingredients.getJSONObject(i);
            System.out.println("- " + ingredient.getString("text"));
        }

        JSONObject nutrients = recipe.getJSONObject("totalNutrients");
        System.out.println("\nNutrition Information:");
        if (nutrients.has("ENERC_KCAL")) {
            JSONObject calories = nutrients.getJSONObject("ENERC_KCAL");
            System.out.println("Calories: " + calories.getDouble("quantity") + " " + calories.getString("unit"));
        }
        if (nutrients.has("PROCNT")) {
            JSONObject protein = nutrients.getJSONObject("PROCNT");
            System.out.println("Protein: " + protein.getDouble("quantity") + " " + protein.getString("unit"));
        }
        System.out.println("--------------------");
    }
}

================
File: entity/Allergy.java
================
package entity;

public enum Allergy {

    CELERY("Celery-Free"),
    CRUSTACEAN("Crustacean-Free"),
    DAIRY("Dairy-Free"),
    EGG("Egg-Free"),
    FISH("Fish-Free"),
    GLUTEN("Gluten-Free"),
    LUPINE("Lupine-Free"),
    MUSTARD("Mustard-Free"),
    PEANUT("Peanut-Free"),
    SESAME("Sesame-Free"),
    SHELLFISH("Shellfish-Free"),
    SOY("Soy-Free"),
    TREE_NUT("Tree-Nut-Free"),
    WHEAT("Wheat-Free"),
    FODMAP("FODMAP-Free"),
    IMMUNO_SUPPORTIVE("Immuno-Supportive");

    private final String displayName;

    Allergy(String displayName) {
        this.displayName = displayName;
    }

    public String getDisplayName() {
        return displayName;
    }
}

================
File: entity/CommonUser.java
================
package entity;

import java.time.LocalDate;
import java.time.Period;
import java.util.*;

public class CommonUser implements User {
    private final String name;
    private final String password;
    private final LocalDate birthDate;
    private final String gender;
    private final int weight;
    private final int height;
    private final double activityMultiplier;
    private final Set<Allergy> allergies;

    // Constants for activity multipliers
    public static final double SEDENTARY = 1.2;
    public static final double LIGHTLY_ACTIVE = 1.375;
    public static final double MODERATELY_ACTIVE = 1.55;
    public static final double VERY_ACTIVE = 1.725;
    public static final double SUPER_ACTIVE = 1.9;

    // Constants for macronutrient calculations
    private static final double CARBS_PERCENT = 0.55;
    private static final double PROTEIN_PERCENT = 0.225;
    private static final double FAT_PERCENT = 0.275;

    private static final double CARBS_CALORIES_PER_GRAM = 4.0;
    private static final double PROTEIN_CALORIES_PER_GRAM = 4.0;
    private static final double FAT_CALORIES_PER_GRAM = 9.0;

    private final Map<MealType, Map<String, Food>> dailyMeals;

    public CommonUser(String name, String password, LocalDate birthDate, String gender,
                      int weight, int height, double activityMultiplier, Set<Allergy> allergies) {
        this.name = name;
        this.password = password;
        this.birthDate = birthDate;
        this.gender = gender;
        this.weight = weight;
        this.height = height;
        this.activityMultiplier = activityMultiplier;
        this.allergies = new HashSet<>(allergies);
        this.dailyMeals = new EnumMap<>(MealType.class);
        for (MealType type : MealType.values()) {
            dailyMeals.put(type, new HashMap<>());
        }
    }


    @Override
    public String getName() {
        return name;
    }

    @Override
    public String getPassword() {
        return password;
    }

    public int getAge() {
        return Period.between(birthDate, LocalDate.now()).getYears();
    }

    public LocalDate getBirthDate() {
        return birthDate;
    }

    public String getGender() {
        return gender;
    }

    public int getWeight() {
        return weight;
    }

    public int getHeight() {
        return height;
    }

    public Set<Allergy> getAllergies() {
        return new HashSet<>(allergies);
    }

    public double getActivityMultiplier() {
        return activityMultiplier;
    }

    public String getActivityLevel() {
        if (activityMultiplier == SEDENTARY) return "Sedentary (little or no exercise)";
        if (activityMultiplier == LIGHTLY_ACTIVE) return "Lightly active (light exercise/sports 1-3 days a week)";
        if (activityMultiplier == MODERATELY_ACTIVE) return "Moderately active (moderate exercise/sports 3-5 days a week)";
        if (activityMultiplier == VERY_ACTIVE) return "Very active (hard exercise/sports 6-7 days a week)";
        if (activityMultiplier == SUPER_ACTIVE) return "Super active (very hard exercise/physical job)";
        return "Activity level not specified";
    }

    public double calculateBMR() {
        if (gender.equalsIgnoreCase("Male")) {
            return (10 * weight) + (6.25 * height) - (5 * getAge()) + 5;
        } else {
            return (10 * weight) + (6.25 * height) - (5 * getAge()) - 161;
        }
    }

    public double calculateTDEE() {
        return calculateBMR() * activityMultiplier;
    }

    public double calculateCarbsGrams() {
        double carbsCalories = calculateTDEE() * CARBS_PERCENT;
        return carbsCalories / CARBS_CALORIES_PER_GRAM;
    }

    public double calculateProteinGrams() {
        double proteinCalories = calculateTDEE() * PROTEIN_PERCENT;
        return proteinCalories / PROTEIN_CALORIES_PER_GRAM;
    }

    public double calculateFatGrams() {
        double fatCalories = calculateTDEE() * FAT_PERCENT;
        return fatCalories / FAT_CALORIES_PER_GRAM;
    }

    // Method to log a meal
    public void addMeal(MealType type, String mealName, Food food) {
        dailyMeals.get(type).put(mealName, food);
    }

    // Method to get meals by type
    public Map<String, Food> getMealsByType(MealType type) {
        return new HashMap<>(dailyMeals.get(type));
    }

    // Method to get all meals
    public Map<MealType, Map<String, Food>> getAllMeals() {
        Map<MealType, Map<String, Food>> result = new EnumMap<>(MealType.class);
        for (MealType type : MealType.values()) {
            result.put(type, new HashMap<>(dailyMeals.get(type)));
        }
        return result;
    }

    // Method to clear meals for a new day
    public void clearMeals() {
        for (MealType type : MealType.values()) {
            dailyMeals.get(type).clear();
        }
    }
}

================
File: entity/CommonUserFactory.java
================
package entity;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

/**
 * Factory for creating CommonUser objects.
 */

public class CommonUserFactory implements UserFactory {
    @Override
    public User create(String name, String password) {
        return new CommonUser(name, password, LocalDate.now(), "", 0, 0, CommonUser.SEDENTARY, new HashSet<>());
    }

    public User createWithInfo(String name, String password, LocalDate birthDate,
                               String gender, int weight, int height, double activityMultiplier, Set<Allergy> allergies) {
        return new CommonUser(name, password, birthDate, gender, weight, height, activityMultiplier, allergies);
    }
}

================
File: entity/Food.java
================
package entity;

import java.util.Map;

public class Food {
    private String foodId;
    private String label;
    private String category;
    private Map<String, Double> nutrients;

    public Food(String foodId, String label, String category, Map<String, Double> nutrients) {
        this.foodId = foodId;
        this.label = label;
        this.category = category;
        this.nutrients = nutrients;
    }

    public String getFoodId() {
        return foodId;
    }

    public void setFoodId(String foodId) {
        this.foodId = foodId;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public Map<String, Double> getNutrients() {
        return nutrients;
    }

    public void setNutrients(Map<String, Double> nutrients) {
        this.nutrients = nutrients;
    }

    // display food information
    @Override
    public String toString() {
        return "Food{" +
                "foodId='" + foodId + '\'' +
                ", label='" + label + '\'' +
                ", category='" + category + '\'' +
                ", nutrients=" + nutrients +
                '}';
    }
}

================
File: entity/MealType.java
================
package entity;

public enum MealType {
    BREAKFAST("B"),
    LUNCH("L"),
    DINNER("D");

    private final String code;

    MealType(String code) {
        this.code = code;
    }

    public String getCode() {
        return code;
    }
}

================
File: entity/User.java
================
package entity;

/**
 * The representation of a user in our program.
 */
public interface User {

    /**
     * Returns the username of the user.
     * @return the username of the user.
     */
    String getName();

    /**
     * Returns the password of the user.
     * @return the password of the user.
     */
    String getPassword();

}

================
File: entity/UserFactory.java
================
package entity;

/**
 * Factory for creating users.
 */
public interface UserFactory {
    /**
     * Creates a new User.
     * @param name the name of the new user
     * @param password the password of the new user
     * @return the new user
     */
    User create(String name, String password);

}

================
File: interface_adapter/change_password/ChangePasswordController.java
================
package interface_adapter.change_password;

import use_case.change_password.ChangePasswordInputBoundary;
import use_case.change_password.ChangePasswordInputData;

/**
 * Controller for the Change Password Use Case.
 */
public class ChangePasswordController {
    private final ChangePasswordInputBoundary userChangePasswordUseCaseInteractor;

    public ChangePasswordController(ChangePasswordInputBoundary userChangePasswordUseCaseInteractor) {
        this.userChangePasswordUseCaseInteractor = userChangePasswordUseCaseInteractor;
    }

    /**
     * Executes the Change Password Use Case.
     * @param password the new password
     * @param username the user whose password to change
     */
    public void execute(String password, String username) {
        final ChangePasswordInputData changePasswordInputData = new ChangePasswordInputData(username, password);

        userChangePasswordUseCaseInteractor.execute(changePasswordInputData);
    }
}

================
File: interface_adapter/change_password/ChangePasswordPresenter.java
================
package interface_adapter.change_password;

import use_case.change_password.ChangePasswordOutputBoundary;
import use_case.change_password.ChangePasswordOutputData;

/**
 * The Presenter for the Change Password Use Case.
 */
public class ChangePasswordPresenter implements ChangePasswordOutputBoundary {

    private final LoggedInViewModel loggedInViewModel;

    public ChangePasswordPresenter(LoggedInViewModel loggedInViewModel) {
        this.loggedInViewModel = loggedInViewModel;
    }

    @Override
    public void prepareSuccessView(ChangePasswordOutputData outputData) {
        // currently there isn't anything to change based on the output data,
        // since the output data only contains the username, which remains the same.
        // We still fire the property changed event, but just to let the view know that
        // it can alert the user that their password was changed successfully..
        loggedInViewModel.firePropertyChanged("password");

    }

    @Override
    public void prepareFailView(String error) {
        // note: this use case currently can't fail
    }
}

================
File: interface_adapter/change_password/LoggedInState.java
================
package interface_adapter.change_password;

/**
 * The State information representing the logged-in user.
 */
public class LoggedInState {
    private String username = "";

    private String password = "";
    private String passwordError;

    public LoggedInState(LoggedInState copy) {
        username = copy.username;
        password = copy.password;
        passwordError = copy.passwordError;
    }

    // Because of the previous copy constructor, the default constructor must be explicit.
    public LoggedInState() {

    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setPasswordError(String passwordError) {
        this.passwordError = passwordError;
    }

    public String getPassword() {
        return password;
    }
}

================
File: interface_adapter/change_password/LoggedInViewModel.java
================
package interface_adapter.change_password;

import interface_adapter.ViewModel;

/**
 * The View Model for the Logged In View.
 */
public class LoggedInViewModel extends ViewModel<LoggedInState> {

    public LoggedInViewModel() {
        super("logged in");
        setState(new LoggedInState());
    }

}

================
File: interface_adapter/dashboard/DashboardController.java
================
package interface_adapter.dashboard;

import entity.Allergy;
import entity.Food;
import entity.MealType;
import use_case.dashboard.DashboardInputBoundary;
import use_case.dashboard.DashboardInputData;

import java.time.LocalDate;
import java.util.Set;

public class DashboardController {
    private final DashboardInputBoundary dashboardUseCaseInteractor;

    public DashboardController(DashboardInputBoundary dashboardUseCaseInteractor) {
        this.dashboardUseCaseInteractor = dashboardUseCaseInteractor;
    }

    public void execute(String username, LocalDate birthDate, String gender,
                        int weight, int height, double activityMultiplier,
                        Set<Allergy> allergies, double consumedCalories,
                        double consumedCarbs, double consumedProtein,
                        double consumedFat) {

        DashboardInputData dashboardInputData = new DashboardInputData(
                username, birthDate, gender, weight, height, activityMultiplier,
                allergies, consumedCalories, consumedCarbs, consumedProtein, consumedFat
        );

        dashboardUseCaseInteractor.execute(dashboardInputData);
    }

    public void onUpdateProfile() {
        dashboardUseCaseInteractor.switchToUpdateProfile();
    }

    public void onGenerateMeal() {
        dashboardUseCaseInteractor.switchToMealPlanner();
    }

    public void onRecordMeal() {
        dashboardUseCaseInteractor.switchToMealRecorder();
    }
}

================
File: interface_adapter/dashboard/DashboardPresenter.java
================
package interface_adapter.dashboard;

import interface_adapter.ViewManagerModel;
import interface_adapter.info_collection.InfoCollectionViewModel;
import use_case.dashboard.DashboardOutputBoundary;
import use_case.dashboard.DashboardOutputData;

import java.util.EnumMap;

public class DashboardPresenter implements DashboardOutputBoundary {
    private final DashboardViewModel dashboardViewModel;
    private final ViewManagerModel viewManagerModel;
    private final InfoCollectionViewModel infoCollectionViewModel;

    public DashboardPresenter(ViewManagerModel viewManagerModel,
                              DashboardViewModel dashboardViewModel,
                              InfoCollectionViewModel infoCollectionViewModel) {
        this.viewManagerModel = viewManagerModel;
        this.dashboardViewModel = dashboardViewModel;
        this.infoCollectionViewModel = new InfoCollectionViewModel();
    }

    @Override
    public void prepareSuccessView(DashboardOutputData outputData) {
        // On success, update the view model state
        DashboardState dashboardState = new DashboardState();

        // Update with user info
        dashboardState.setUsername(outputData.getUsername());
        dashboardState.setBmr(outputData.getBmr());
        dashboardState.setTdee(outputData.getTdee());

        // Set nutrition goals and progress
        dashboardState.setDailyCalorieGoal(outputData.getTdee());
        dashboardState.setCarbsGoalGrams(outputData.getCarbsGoal());
        dashboardState.setProteinGoalGrams(outputData.getProteinGoal());
        dashboardState.setFatGoalGrams(outputData.getFatGoal());

        dashboardState.setConsumedCalories(outputData.getConsumedCalories());
        dashboardState.setConsumedCarbs(outputData.getConsumedCarbs());
        dashboardState.setConsumedProtein(outputData.getConsumedProtein());
        dashboardState.setConsumedFat(outputData.getConsumedFat());

        // Additional info
        dashboardState.setAllergies(outputData.getAllergies());
        dashboardState.setActivityLevel(outputData.getActivityLevel());

        dashboardViewModel.setState(dashboardState);
        dashboardViewModel.firePropertyChanged();

        viewManagerModel.setActiveView(dashboardViewModel.getViewName());
        viewManagerModel.firePropertyChanged();
    }

    @Override
    public void prepareSwitchToInfoCollection() {
        // Switch to info collection view
        viewManagerModel.setActiveView(infoCollectionViewModel.getViewName());
        viewManagerModel.firePropertyChanged();
    }


    @Override
    public void prepareFailView(String error) {
        DashboardState dashboardState = (DashboardState) dashboardViewModel.getState();
        dashboardState.setError(error);
        dashboardViewModel.setState(dashboardState);
        dashboardViewModel.firePropertyChanged();
    }
}

================
File: interface_adapter/dashboard/DashboardState.java
================
package interface_adapter.dashboard;

import entity.Allergy;
import java.time.LocalDate;
import java.util.*;

public class DashboardState {
    // User information
    private String username = "";
    private LocalDate birthDate;
    private String gender = "";
    private int weight = 0;
    private int height = 0;
    private double activityMultiplier = 1.2;
    private String activityLevel = "";
    private Set<Allergy> allergies = new HashSet<>();

    // Nutrition goals
    private double bmr = 0.0;
    private double tdee = 0.0;
    private double dailyCalorieGoal = 0.0;
    private double carbsGoalGrams = 0.0;
    private double proteinGoalGrams = 0.0;
    private double fatGoalGrams = 0.0;

    // Current progress
    private double consumedCalories = 0.0;
    private double consumedCarbs = 0.0;
    private double consumedProtein = 0.0;
    private double consumedFat = 0.0;

    // UI state
    private String error = "";
    private String successMessage = "";
    private boolean isLoading = false;

    // Copy constructor
    public DashboardState(DashboardState copy) {
        this.username = copy.username;
        this.birthDate = copy.birthDate;
        this.gender = copy.gender;
        this.weight = copy.weight;
        this.height = copy.height;
        this.activityMultiplier = copy.activityMultiplier;
        this.activityLevel = copy.activityLevel;
        this.allergies = new HashSet<>(copy.allergies);
        this.bmr = copy.bmr;
        this.tdee = copy.tdee;
        this.dailyCalorieGoal = copy.dailyCalorieGoal;
        this.carbsGoalGrams = copy.carbsGoalGrams;
        this.proteinGoalGrams = copy.proteinGoalGrams;
        this.fatGoalGrams = copy.fatGoalGrams;
        this.consumedCalories = copy.consumedCalories;
        this.consumedCarbs = copy.consumedCarbs;
        this.consumedProtein = copy.consumedProtein;
        this.consumedFat = copy.consumedFat;
        this.error = copy.error;
        this.successMessage = copy.successMessage;
        this.isLoading = copy.isLoading;
    }

    // Default constructor
    public DashboardState() {}

    // Base information getters and setters
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public LocalDate getBirthDate() { return birthDate; }
    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }

    public String getGender() { return gender; }
    public void setGender(String gender) { this.gender = gender; }

    public int getWeight() { return weight; }
    public void setWeight(int weight) { this.weight = weight; }

    public int getHeight() { return height; }
    public void setHeight(int height) { this.height = height; }

    public double getActivityMultiplier() { return activityMultiplier; }
    public void setActivityMultiplier(double activityMultiplier) { this.activityMultiplier = activityMultiplier; }

    public String getActivityLevel() { return activityLevel; }
    public void setActivityLevel(String activityLevel) { this.activityLevel = activityLevel; }

    public Set<Allergy> getAllergies() { return new HashSet<>(allergies); }
    public void setAllergies(Set<Allergy> allergies) { this.allergies = new HashSet<>(allergies); }

    // Nutrition calculations getters and setters
    public double getBmr() { return bmr; }
    public void setBmr(double bmr) {
        this.bmr = bmr;
        updateNutritionGoals();
    }

    public double getTdee() { return tdee; }
    public void setTdee(double tdee) {
        this.tdee = tdee;
        this.dailyCalorieGoal = tdee;
        updateNutritionGoals();
    }

    public double getDailyCalorieGoal() { return dailyCalorieGoal; }
    public void setDailyCalorieGoal(double dailyCalorieGoal) {
        this.dailyCalorieGoal = dailyCalorieGoal;
    }

    // Macro goals
    public double getCarbsGoalGrams() { return carbsGoalGrams; }
    public void setCarbsGoalGrams(double carbsGoalGrams) { this.carbsGoalGrams = carbsGoalGrams; }

    public double getProteinGoalGrams() { return proteinGoalGrams; }
    public void setProteinGoalGrams(double proteinGoalGrams) { this.proteinGoalGrams = proteinGoalGrams; }

    public double getFatGoalGrams() { return fatGoalGrams; }
    public void setFatGoalGrams(double fatGoalGrams) { this.fatGoalGrams = fatGoalGrams; }

    // Consumption tracking
    public double getConsumedCalories() { return consumedCalories; }
    public void setConsumedCalories(double consumedCalories) { this.consumedCalories = consumedCalories; }

    public double getConsumedCarbs() { return consumedCarbs; }
    public void setConsumedCarbs(double consumedCarbs) { this.consumedCarbs = consumedCarbs; }

    public double getConsumedProtein() { return consumedProtein; }
    public void setConsumedProtein(double consumedProtein) { this.consumedProtein = consumedProtein; }

    public double getConsumedFat() { return consumedFat; }
    public void setConsumedFat(double consumedFat) { this.consumedFat = consumedFat; }

    // UI state getters and setters
    public String getError() { return error; }
    public void setError(String error) { this.error = error; }

    public String getSuccessMessage() { return successMessage; }
    public void setSuccessMessage(String successMessage) { this.successMessage = successMessage; }

    public boolean isLoading() { return isLoading; }
    public void setLoading(boolean loading) { isLoading = loading; }

    // Progress calculation methods
    public int getCaloriePercentage() {
        return calculatePercentage(consumedCalories, dailyCalorieGoal);
    }

    public int getCarbsPercentage() {
        return calculatePercentage(consumedCarbs, carbsGoalGrams);
    }

    public int getProteinPercentage() {
        return calculatePercentage(consumedProtein, proteinGoalGrams);
    }

    public int getFatPercentage() {
        return calculatePercentage(consumedFat, fatGoalGrams);
    }

    // Helper methods
    private int calculatePercentage(double current, double goal) {
        return goal > 0 ? (int)((current / goal) * 100) : 0;
    }

    private void updateNutritionGoals() {
        // Calculate macro goals based on TDEE
        // Carbs: 45-65% (using 50%)
        carbsGoalGrams = (tdee * 0.50) / 4.0;  // 4 calories per gram

        // Protein: 10-35% (using 25%)
        proteinGoalGrams = (tdee * 0.25) / 4.0;  // 4 calories per gram

        // Fat: 20-35% (using 25%)
        fatGoalGrams = (tdee * 0.25) / 9.0;  // 9 calories per gram
    }

    // Formatting helpers for display
    public String getFormattedCalorieProgress() {
        return String.format("%.0f / %.0f kcal", consumedCalories, dailyCalorieGoal);
    }

    public String getFormattedCarbsProgress() {
        return String.format("%.1f / %.1f g", consumedCarbs, carbsGoalGrams);
    }

    public String getFormattedProteinProgress() {
        return String.format("%.1f / %.1f g", consumedProtein, proteinGoalGrams);
    }

    public String getFormattedFatProgress() {
        return String.format("%.1f / %.1f g", consumedFat, fatGoalGrams);
    }
}

================
File: interface_adapter/dashboard/DashboardViewModel.java
================
package interface_adapter.dashboard;

import interface_adapter.ViewModel;

public class DashboardViewModel extends ViewModel {
    // View constants
    public static final String TITLE_LABEL = "Dashboard";
    public static final String WELCOME_LABEL = "Welcome, ";
    public static final String UPDATE_PROFILE_BUTTON_LABEL = "Update Profile";
    public static final String GENERATE_MEAL_BUTTON_LABEL = "Generate Meal Plan";
    public static final String RECORD_MEAL_BUTTON_LABEL = "Record Meal";
    public static final String CALORIES_LABEL = "Daily Calories";
    public static final String CARBS_LABEL = "Carbohydrates";
    public static final String PROTEIN_LABEL = "Protein";
    public static final String FAT_LABEL = "Fat";

    public DashboardViewModel() {
        super("dashboard");
        setState(new DashboardState());
    }
}

================
File: interface_adapter/info_collection/InfoCollectionController.java
================
package interface_adapter.info_collection;

import use_case.info_collection.InfoCollectionInputBoundary;
import use_case.info_collection.InfoCollectionInputData;
import java.time.LocalDate;
import java.util.Set;
import entity.Allergy;

public class InfoCollectionController {
    final InfoCollectionInputBoundary infoCollectionUseCaseInteractor;

    public InfoCollectionController(InfoCollectionInputBoundary infoCollectionUseCaseInteractor) {
        this.infoCollectionUseCaseInteractor = infoCollectionUseCaseInteractor;
    }

    public void execute(String username, String password, int yearOfBirth,
                        String gender, int weight, int height,
                        double activityMultiplier, Set<Allergy> allergies) {
        LocalDate birthDate = LocalDate.of(yearOfBirth, 1, 1);

        InfoCollectionInputData inputData = new InfoCollectionInputData(
                username, password, birthDate, gender, weight, height,
                activityMultiplier, allergies);

        infoCollectionUseCaseInteractor.execute(inputData);
    }
}

================
File: interface_adapter/info_collection/InfoCollectionPresenter.java
================
package interface_adapter.info_collection;

import interface_adapter.ViewManagerModel;
import interface_adapter.dashboard.DashboardState;
import interface_adapter.dashboard.DashboardViewModel;
import use_case.info_collection.InfoCollectionOutputBoundary;
import use_case.info_collection.InfoCollectionOutputData;

public class InfoCollectionPresenter implements InfoCollectionOutputBoundary {
    private final ViewManagerModel viewManagerModel;
    private final InfoCollectionViewModel infoCollectionViewModel;
    private final DashboardViewModel dashboardViewModel;

    public InfoCollectionPresenter(ViewManagerModel viewManagerModel,
                                   InfoCollectionViewModel infoCollectionViewModel,
                                   DashboardViewModel dashboardViewModel) {
        this.viewManagerModel = viewManagerModel;
        this.infoCollectionViewModel = infoCollectionViewModel;
        this.dashboardViewModel = dashboardViewModel;
    }

    @Override
    public void prepareSuccessView(InfoCollectionOutputData response) {
        // First update info collection state
        InfoCollectionState infoCollectionState = infoCollectionViewModel.getState();
        infoCollectionState.setUsername(response.getUsername());
        infoCollectionViewModel.setState(infoCollectionState);
        infoCollectionViewModel.firePropertyChanged();

        // Prepare dashboard state
        DashboardState dashboardState = (DashboardState) dashboardViewModel.getState();

        // Set user information
        dashboardState.setUsername(response.getUsername());
        dashboardState.setBirthDate(response.getBirthDate());
        dashboardState.setGender(response.getGender());
        dashboardState.setWeight(response.getWeight());
        dashboardState.setHeight(response.getHeight());
        dashboardState.setActivityMultiplier(response.getActivityMultiplier());
        dashboardState.setAllergies(response.getAllergies());

        // Set calculated values
        dashboardState.setBmr(response.getCalculatedBMR());
        dashboardState.setTdee(response.getCalculatedTDEE());

        // Set activity level description based on multiplier
        dashboardState.setActivityLevel(getActivityLevelDescription(response.getActivityMultiplier()));

        // Clear any existing progress
        dashboardState.setConsumedCalories(0.0);
        dashboardState.setConsumedCarbs(0.0);
        dashboardState.setConsumedProtein(0.0);
        dashboardState.setConsumedFat(0.0);

        // Clear any error messages and set success message
        dashboardState.setError("");
        dashboardState.setSuccessMessage("Profile created successfully!");
        dashboardState.setLoading(false);

        // Update dashboard view model
        dashboardViewModel.setState(dashboardState);
        dashboardViewModel.firePropertyChanged();

        // Switch to dashboard view
        viewManagerModel.setActiveView(dashboardViewModel.getViewName());
        viewManagerModel.firePropertyChanged();
    }

    @Override
    public void prepareFailView(String error) {
        InfoCollectionState infoCollectionState = infoCollectionViewModel.getState();
        if (error.contains("age") || error.contains("birth")) {
            infoCollectionState.setYearOfBirthError(error);
        } else if (error.contains("weight")) {
            infoCollectionState.setWeightError(error);
        } else if (error.contains("height")) {
            infoCollectionState.setHeightError(error);
        } else if (error.contains("gender")) {
            infoCollectionState.setGenderError(error);
        }
        infoCollectionViewModel.firePropertyChanged();
    }

    private String getActivityLevelDescription(double multiplier) {
        return switch ((int) (multiplier * 10)) {
            case 12 -> "Sedentary (little or no exercise)";
            case 13, 14 -> "Lightly active (light exercise 1-3 days/week)";
            case 15, 16 -> "Moderately active (moderate exercise 3-5 days/week)";
            case 17, 18 -> "Very active (hard exercise 6-7 days/week)";
            case 19, 20 -> "Super active (very hard exercise/physical job)";
            default -> "Unknown activity level";
        };
    }
}

================
File: interface_adapter/info_collection/InfoCollectionState.java
================
package interface_adapter.info_collection;

import entity.Allergy;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

public class InfoCollectionState {
    // User data fields
    private String username = "";
    private String password = "";
    private int yearOfBirth = LocalDate.now().getYear() - 25; // default age 25
    private String gender = "";
    private int weight = 0;
    private int height = 0;
    private double activityMultiplier = 1.2; // default to sedentary
    private Set<Allergy> allergies = new HashSet<>();

    // Error message fields
    private String yearOfBirthError = "";
    private String weightError = "";
    private String heightError = "";
    private String genderError = "";
    private String allegySelectionError = "";

    // Copy constructor
    public InfoCollectionState(InfoCollectionState copy) {
        this.username = copy.username;
        this.password = copy.password;
        this.yearOfBirth = copy.yearOfBirth;
        this.gender = copy.gender;
        this.weight = copy.weight;
        this.height = copy.height;
        this.activityMultiplier = copy.activityMultiplier;
        this.allergies = new HashSet<>(copy.allergies);
        this.yearOfBirthError = copy.yearOfBirthError;
        this.weightError = copy.weightError;
        this.heightError = copy.heightError;
        this.genderError = copy.genderError;
        this.allegySelectionError = copy.allegySelectionError;
    }

    // Default constructor
    public InfoCollectionState() {}

    // Getters
    public String getUsername() { return username; }
    public String getPassword() { return password; }
    public int getYearOfBirth() { return yearOfBirth; }
    public String getGender() { return gender; }
    public int getWeight() { return weight; }
    public int getHeight() { return height; }
    public double getActivityMultiplier() { return activityMultiplier; }
    public Set<Allergy> getAllergies() { return new HashSet<>(allergies); }

    // Error getters
    public String getYearOfBirthError() { return yearOfBirthError; }
    public String getWeightError() { return weightError; }
    public String getHeightError() { return heightError; }
    public String getGenderError() { return genderError; }
    public String getAllergySelectionError() { return allegySelectionError; }

    // Setters
    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setYearOfBirth(int yearOfBirth) {
        this.yearOfBirth = yearOfBirth;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public void setWeight(int weight) {
        this.weight = weight;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public void setActivityMultiplier(double activityMultiplier) {
        this.activityMultiplier = activityMultiplier;
    }

    public void setAllergies(Set<Allergy> allergies) {
        this.allergies = new HashSet<>(allergies);
    }

    // Error setters
    public void setYearOfBirthError(String error) {
        this.yearOfBirthError = error;
    }

    public void setWeightError(String error) {
        this.weightError = error;
    }

    public void setHeightError(String error) {
        this.heightError = error;
    }

    public void setGenderError(String error) {
        this.genderError = error;
    }

    public void setAllergySelectionError(String error) {
        this.allegySelectionError = error;
    }

    // Helper method to clear all error messages
    public void clearErrors() {
        this.yearOfBirthError = "";
        this.weightError = "";
        this.heightError = "";
        this.genderError = "";
        this.allegySelectionError = "";
    }

    // Helper method to check if there are any error messages
    public boolean hasErrors() {
        return !yearOfBirthError.isEmpty()
                || !weightError.isEmpty()
                || !heightError.isEmpty()
                || !genderError.isEmpty()
                || !allegySelectionError.isEmpty();
    }

    // Helper method to convert to LocalDate
    public LocalDate getBirthDate() {
        return LocalDate.of(yearOfBirth, 1, 1);
    }

    // Helper method to check if all required fields are filled
    public boolean isComplete() {
        return !username.isEmpty()
                && !password.isEmpty()
                && yearOfBirth > 0
                && !gender.isEmpty()
                && weight > 0
                && height > 0
                && activityMultiplier > 0;
        // Note: allergies can be empty as they're optional
    }
}

================
File: interface_adapter/info_collection/InfoCollectionViewModel.java
================
package interface_adapter.info_collection;

import interface_adapter.ViewModel;

public class InfoCollectionViewModel extends ViewModel<InfoCollectionState> {
    public static final String TITLE_LABEL = "Complete Your Profile";
    public static final String BIRTH_YEAR_LABEL = "Year of Birth:";
    public static final String GENDER_LABEL = "Gender:";
    public static final String WEIGHT_LABEL = "Weight (kg):";
    public static final String HEIGHT_LABEL = "Height (cm):";
    public static final String ACTIVITY_LABEL = "Activity Level:";
    public static final String ALLERGIES_LABEL = "Allergies & Preferences";

    public static final String SAVE_BUTTON_LABEL = "Save";
    public static final String CANCEL_BUTTON_LABEL = "Cancel";

    public InfoCollectionViewModel() {
        super("info collection");
        setState(new InfoCollectionState());
    }
}

================
File: interface_adapter/login/LoginController.java
================
package interface_adapter.login;

import use_case.login.LoginInputBoundary;
import use_case.login.LoginInputData;

/**
 * The controller for the Login Use Case.
 */
public class LoginController {

    private final LoginInputBoundary loginUseCaseInteractor;

    public LoginController(LoginInputBoundary loginUseCaseInteractor) {
        this.loginUseCaseInteractor = loginUseCaseInteractor;
    }

    /**
     * Executes the Login Use Case.
     * @param username the username of the user logging in
     * @param password the password of the user logging in
     */
    public void execute(String username, String password) {
        final LoginInputData loginInputData = new LoginInputData(
                username, password);

        loginUseCaseInteractor.execute(loginInputData);
    }
}

================
File: interface_adapter/login/LoginPresenter.java
================
package interface_adapter.login;

import interface_adapter.ViewManagerModel;
import interface_adapter.change_password.LoggedInViewModel;
import interface_adapter.dashboard.DashboardState;
import interface_adapter.dashboard.DashboardViewModel;
import interface_adapter.info_collection.InfoCollectionState;
import interface_adapter.info_collection.InfoCollectionViewModel;
import use_case.login.LoginOutputBoundary;
import use_case.login.LoginOutputData;
import entity.CommonUser;

public class LoginPresenter implements LoginOutputBoundary {
    private final ViewManagerModel viewManagerModel;
    private final LoggedInViewModel loggedInViewModel;
    private final LoginViewModel loginViewModel;
    private final InfoCollectionViewModel infoCollectionViewModel;
    private final DashboardViewModel dashboardViewModel;

    public LoginPresenter(ViewManagerModel viewManagerModel,
                          LoggedInViewModel loggedInViewModel,
                          LoginViewModel loginViewModel,
                          InfoCollectionViewModel infoCollectionViewModel,
                          DashboardViewModel dashboardViewModel) {
        this.viewManagerModel = viewManagerModel;
        this.loggedInViewModel = loggedInViewModel;
        this.loginViewModel = loginViewModel;
        this.infoCollectionViewModel = infoCollectionViewModel;
        this.dashboardViewModel = dashboardViewModel;
    }

    @Override
    public void prepareSuccessView(LoginOutputData response) {
        if (response.isProfileComplete()) {
            DashboardState dashboardState = new DashboardState();
            dashboardState.setUsername(response.getUsername());

            // Set other necessary state properties from response
            CommonUser user = response.getUser();
            if (user != null) {
                dashboardState.setBirthDate(user.getBirthDate());
                dashboardState.setGender(user.getGender());
                dashboardState.setWeight(user.getWeight());
                dashboardState.setHeight(user.getHeight());
                dashboardState.setActivityMultiplier(user.getActivityMultiplier());
                dashboardState.setAllergies(user.getAllergies());
                dashboardState.setBmr(user.calculateBMR());
                dashboardState.setTdee(user.calculateTDEE());
            }

            dashboardViewModel.setState(dashboardState);
            dashboardViewModel.firePropertyChanged();
            viewManagerModel.setActiveView(dashboardViewModel.getViewName());
        } else {
            prepareRedirectToInfoCollection(response);
        }
        viewManagerModel.firePropertyChanged();
    }

    @Override
    public void prepareRedirectToInfoCollection(LoginOutputData response) {
        InfoCollectionState infoCollectionState = infoCollectionViewModel.getState();
        infoCollectionState.setUsername(response.getUsername());

        // If we have any partial user data, we can set it here
        CommonUser user = response.getUser();
        if (user != null) {
            if (user.getBirthDate() != null) {
                infoCollectionState.setYearOfBirth(user.getBirthDate().getYear());
            }
            if (!user.getGender().isEmpty()) {
                infoCollectionState.setGender(user.getGender());
            }
            if (user.getWeight() > 0) {
                infoCollectionState.setWeight(user.getWeight());
            }
            if (user.getHeight() > 0) {
                infoCollectionState.setHeight(user.getHeight());
            }
            if (user.getActivityMultiplier() > 0) {
                infoCollectionState.setActivityMultiplier(user.getActivityMultiplier());
            }
            infoCollectionState.setAllergies(user.getAllergies());
        }

        infoCollectionViewModel.setState(infoCollectionState);
        infoCollectionViewModel.firePropertyChanged();
        viewManagerModel.setActiveView(infoCollectionViewModel.getViewName());
    }

    @Override
    public void prepareFailView(String error) {
        LoginState loginState = loginViewModel.getState();
        loginState.setLoginError(error);
        loginViewModel.firePropertyChanged();
    }
}

================
File: interface_adapter/login/LoginState.java
================
package interface_adapter.login;

/**
 * The state for the Login View Model.
 */
public class LoginState {
    private String username = "";
    private String loginError;
    private String password = "";

    public String getUsername() {
        return username;
    }

    public String getLoginError() {
        return loginError;
    }

    public String getPassword() {
        return password;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setLoginError(String usernameError) {
        this.loginError = usernameError;
    }

    public void setPassword(String password) {
        this.password = password;
    }

}

================
File: interface_adapter/login/LoginViewModel.java
================
package interface_adapter.login;

import interface_adapter.ViewModel;

/**
 * The View Model for the Login View.
 */
public class LoginViewModel extends ViewModel<LoginState> {

    public LoginViewModel() {
        super("log in");
        setState(new LoginState());
    }

}

================
File: interface_adapter/logout/LogoutController.java
================
package interface_adapter.logout;

import use_case.logout.LogoutInputBoundary;
import use_case.logout.LogoutInputData;

/**
 * The controller for the Logout Use Case.
 */
public class LogoutController {

    private LogoutInputBoundary logoutUseCaseInteractor;

    public LogoutController(LogoutInputBoundary logoutUseCaseInteractor) {
        this.logoutUseCaseInteractor = logoutUseCaseInteractor;
    }

    /**
     * Executes the Logout Use Case.
     * @param username the username of the user logging in
     */
    public void execute(String username) {
        // 1. instantiate the `LogoutInputData`, which should contain the username.
        // 2. tell the Interactor to execute.
        final LogoutInputData logoutInputData = new LogoutInputData(
                username);
        logoutUseCaseInteractor.execute(logoutInputData);
    }
}

================
File: interface_adapter/logout/LogoutPresenter.java
================
package interface_adapter.logout;

import interface_adapter.ViewManagerModel;
import interface_adapter.change_password.LoggedInState;
import interface_adapter.change_password.LoggedInViewModel;
import interface_adapter.login.LoginState;
import interface_adapter.login.LoginViewModel;
import use_case.logout.LogoutOutputBoundary;
import use_case.logout.LogoutOutputData;

/**
 * The Presenter for the Logout Use Case.
 */
public class LogoutPresenter implements LogoutOutputBoundary {

    private LoggedInViewModel loggedInViewModel;
    private ViewManagerModel viewManagerModel;
    private LoginViewModel loginViewModel;

    public LogoutPresenter(ViewManagerModel viewManagerModel,
                          LoggedInViewModel loggedInViewModel,
                           LoginViewModel loginViewModel) {
        // TODO: assign to the three instance variables.
        this.viewManagerModel = viewManagerModel;
        this.loggedInViewModel = loggedInViewModel;
        this.loginViewModel = loginViewModel;
    }

    @Override
    public void prepareSuccessView(LogoutOutputData response) {
        // We need to switch to the login view, which should have
        // an empty username and password.

        // We also need to set the username in the LoggedInState to
        // the empty string.

        // TODO: have prepareSuccessView update the LoggedInState
        // 1. get the LoggedInState out of the appropriate View Model,
        // 2. set the username in the state to the empty string
        // 3. set the state in the LoggedInViewModel to the updated state
        // 4. firePropertyChanged so that the View that is listening is updated.
        final LoggedInState loggedInState = loggedInViewModel.getState();
        loggedInState.setUsername("");
        loggedInViewModel.setState(loggedInState);
        loggedInViewModel.firePropertyChanged();

        // TODO: have prepareSuccessView update the LoginState
        // 5. get the LoginState out of the appropriate View Model,
        // 6. set the username and password in the state to the empty string
        // 7. set the state in the LoginViewModel to the updated state
        // 8. firePropertyChanged so that the View that is listening is updated.
        final LoginState loginState = loginViewModel.getState();
        loginState.setUsername("");
        loginState.setPassword("");
        loginViewModel.setState(loginState);
        loginViewModel.firePropertyChanged();

        // This code tells the View Manager to switch to the LoginView.
        this.viewManagerModel.setState(loginViewModel.getViewName());
        this.viewManagerModel.firePropertyChanged();
    }

    @Override
    public void prepareFailView(String error) {
        // No need to add code here. We'll assume that logout can't fail.
        // Thought question: is this a reasonable assumption?
    }
}

================
File: interface_adapter/signup/SignupController.java
================
package interface_adapter.signup;

import use_case.signup.SignupInputBoundary;
import use_case.signup.SignupInputData;

/**
 * Controller for the Signup Use Case.
 */
public class SignupController {

    private final SignupInputBoundary userSignupUseCaseInteractor;

    public SignupController(SignupInputBoundary userSignupUseCaseInteractor) {
        this.userSignupUseCaseInteractor = userSignupUseCaseInteractor;
    }

    /**
     * Executes the Signup Use Case.
     * @param username the username to sign up
     * @param password1 the password
     * @param password2 the password repeated
     */
    public void execute(String username, String password1, String password2) {
        final SignupInputData signupInputData = new SignupInputData(
                username, password1, password2);

        userSignupUseCaseInteractor.execute(signupInputData);
    }

    /**
     * Executes the "switch to LoginView" Use Case.
     */
    public void switchToLoginView() {
        userSignupUseCaseInteractor.switchToLoginView();
    }
}

================
File: interface_adapter/signup/SignupPresenter.java
================
package interface_adapter.signup;

import interface_adapter.ViewManagerModel;
import interface_adapter.login.LoginState;
import interface_adapter.login.LoginViewModel;
import interface_adapter.info_collection.InfoCollectionState;
import interface_adapter.info_collection.InfoCollectionViewModel;
import use_case.signup.SignupOutputBoundary;
import use_case.signup.SignupOutputData;

public class SignupPresenter implements SignupOutputBoundary {
    private final SignupViewModel signupViewModel;
    private final LoginViewModel loginViewModel;
    private final InfoCollectionViewModel infoCollectionViewModel;  // Added this field
    private final ViewManagerModel viewManagerModel;

    public SignupPresenter(ViewManagerModel viewManagerModel,
                           SignupViewModel signupViewModel,
                           LoginViewModel loginViewModel,
                           InfoCollectionViewModel infoCollectionViewModel) {  // Added parameter
        this.viewManagerModel = viewManagerModel;
        this.signupViewModel = signupViewModel;
        this.loginViewModel = loginViewModel;
        this.infoCollectionViewModel = infoCollectionViewModel;  // Store the parameter
    }

    @Override
    public void prepareSuccessView(SignupOutputData response) {
        // Update info collection state with the username and password
        InfoCollectionState infoCollectionState = infoCollectionViewModel.getState();
        infoCollectionState.setUsername(response.getUsername());
        infoCollectionState.setPassword(response.getPassword());
        infoCollectionViewModel.setState(infoCollectionState);
        infoCollectionViewModel.firePropertyChanged();

        // Switch to info collection view
        viewManagerModel.setActiveView(infoCollectionViewModel.getViewName());
        viewManagerModel.firePropertyChanged();
    }

    @Override
    public void prepareFailView(String error) {
        SignupState signupState = signupViewModel.getState();
        signupState.setUsernameError(error);
        signupViewModel.firePropertyChanged();
    }

    @Override
    public void switchToLoginView() {
        viewManagerModel.setState(loginViewModel.getViewName());
        viewManagerModel.firePropertyChanged();
    }
}

================
File: interface_adapter/signup/SignupState.java
================
package interface_adapter.signup;

/**
 * The state for the Signup View Model.
 */
public class SignupState {
    private String username = "";
    private String usernameError;
    private String password = "";
    private String passwordError;
    private String repeatPassword = "";
    private String repeatPasswordError;

    public String getUsername() {
        return username;
    }

    public String getUsernameError() {
        return usernameError;
    }

    public String getPassword() {
        return password;
    }

    public String getPasswordError() {
        return passwordError;
    }

    public String getRepeatPassword() {
        return repeatPassword;
    }

    public String getRepeatPasswordError() {
        return repeatPasswordError;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setUsernameError(String usernameError) {
        this.usernameError = usernameError;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setPasswordError(String passwordError) {
        this.passwordError = passwordError;
    }

    public void setRepeatPassword(String repeatPassword) {
        this.repeatPassword = repeatPassword;
    }

    public void setRepeatPasswordError(String repeatPasswordError) {
        this.repeatPasswordError = repeatPasswordError;
    }

    @Override
    public String toString() {
        return "SignupState{"
                + "username='" + username + '\''
                + ", password='" + password + '\''
                + ", repeatPassword='" + repeatPassword + '\''
                + '}';
    }
}

================
File: interface_adapter/signup/SignupViewModel.java
================
package interface_adapter.signup;

import interface_adapter.ViewModel;

/**
 * The ViewModel for the Signup View.
 */
public class SignupViewModel extends ViewModel<SignupState> {

    public static final String TITLE_LABEL = "Sign Up View";
    public static final String USERNAME_LABEL = "Choose username";
    public static final String PASSWORD_LABEL = "Choose password";
    public static final String REPEAT_PASSWORD_LABEL = "Enter password again";

    public static final String SIGNUP_BUTTON_LABEL = "Sign up";
    public static final String CANCEL_BUTTON_LABEL = "Cancel";

    public static final String TO_LOGIN_BUTTON_LABEL = "Go to Login";

    public SignupViewModel() {
        super("sign up");
        setState(new SignupState());
    }

}

================
File: interface_adapter/ViewManagerModel.java
================
package interface_adapter;

/**
 * Model for the View Manager. Its state is the name of the View which
 * is currently active. An initial state of "" is used.
 */
public class ViewManagerModel extends ViewModel<String> {

    public ViewManagerModel() {
        super("view manager");
        this.setState("");
    }
    // Alias setActiveView to setState for clarity
    public void setActiveView(String viewName) {
        this.setState(viewName);
    }
}

================
File: interface_adapter/ViewModel.java
================
package interface_adapter;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

/**
 * The ViewModel for our CA implementation.
 * This class delegates work to a PropertyChangeSupport object for
 * managing the property change events.
 *
 * @param <T> The type of state object contained in the model.
 */
public class ViewModel<T> {

    private final String viewName;

    private final PropertyChangeSupport support = new PropertyChangeSupport(this);

    private T state;

    public ViewModel(String viewName) {
        this.viewName = viewName;
    }

    public String getViewName() {
        return this.viewName;
    }

    public T getState() {
        return this.state;
    }

    public void setState(T state) {
        this.state = state;
    }

    /**
     * Fires a property changed event for the state of this ViewModel.
     */
    public void firePropertyChanged() {
        this.support.firePropertyChange("state", null, this.state);
    }

    /**
     * Fires a property changed event for the state of this ViewModel, which
     * allows the user to specify a different propertyName. This can be useful
     * when a class is listening for multiple kinds of property changes.
     * <p/>
     * For example, the LoggedInView listens for two kinds of property changes;
     * it can use the property name to distinguish which property has changed.
     * @param propertyName the label for the property that was changed
     */
    public void firePropertyChanged(String propertyName) {
        this.support.firePropertyChange(propertyName, null, this.state);
    }

    /**
     * Adds a PropertyChangeListener to this ViewModel.
     * @param listener The PropertyChangeListener to be added
     */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.support.addPropertyChangeListener(listener);
    }
}

================
File: use_case/change_password/ChangePasswordInputBoundary.java
================
package use_case.change_password;

/**
 * The Change Password Use Case.
 */
public interface ChangePasswordInputBoundary {

    /**
     * Execute the Change Password Use Case.
     * @param changePasswordInputData the input data for this use case
     */
    void execute(ChangePasswordInputData changePasswordInputData);

}

================
File: use_case/change_password/ChangePasswordInputData.java
================
package use_case.change_password;

/**
 * The input data for the Change Password Use Case.
 */
public class ChangePasswordInputData {

    private final String password;
    private final String username;

    public ChangePasswordInputData(String password, String username) {
        this.password = password;
        this.username = username;
    }

    String getPassword() {
        return password;
    }

    String getUsername() {
        return username;
    }

}

================
File: use_case/change_password/ChangePasswordInteractor.java
================
package use_case.change_password;

import entity.User;
import entity.UserFactory;

/**
 * The Change Password Interactor.
 */
public class ChangePasswordInteractor implements ChangePasswordInputBoundary {
    private final ChangePasswordUserDataAccessInterface userDataAccessObject;
    private final ChangePasswordOutputBoundary userPresenter;
    private final UserFactory userFactory;

    public ChangePasswordInteractor(ChangePasswordUserDataAccessInterface changePasswordDataAccessInterface,
                                    ChangePasswordOutputBoundary changePasswordOutputBoundary,
                                    UserFactory userFactory) {
        this.userDataAccessObject = changePasswordDataAccessInterface;
        this.userPresenter = changePasswordOutputBoundary;
        this.userFactory = userFactory;
    }

    @Override
    public void execute(ChangePasswordInputData changePasswordInputData) {
        final User user = userFactory.create(changePasswordInputData.getUsername(),
                                             changePasswordInputData.getPassword());
        userDataAccessObject.changePassword(user);

        final ChangePasswordOutputData changePasswordOutputData = new ChangePasswordOutputData(user.getName(),
                                                                                  false);
        userPresenter.prepareSuccessView(changePasswordOutputData);
    }
}

================
File: use_case/change_password/ChangePasswordOutputBoundary.java
================
package use_case.change_password;

/**
 * The output boundary for the Change Password Use Case.
 */
public interface ChangePasswordOutputBoundary {
    /**
     * Prepares the success view for the Change Password Use Case.
     * @param outputData the output data
     */
    void prepareSuccessView(ChangePasswordOutputData outputData);

    /**
     * Prepares the failure view for the Change Password Use Case.
     * @param errorMessage the explanation of the failure
     */
    void prepareFailView(String errorMessage);
}

================
File: use_case/change_password/ChangePasswordOutputData.java
================
package use_case.change_password;

/**
 * Output Data for the Change Password Use Case.
 */
public class ChangePasswordOutputData {

    private final String username;

    private final boolean useCaseFailed;

    public ChangePasswordOutputData(String username, boolean useCaseFailed) {
        this.username = username;
        this.useCaseFailed = useCaseFailed;
    }

    public String getUsername() {
        return username;
    }

    public boolean isUseCaseFailed() {
        return useCaseFailed;
    }
}

================
File: use_case/change_password/ChangePasswordUserDataAccessInterface.java
================
package use_case.change_password;

import entity.User;

/**
 * The interface of the DAO for the Change Password Use Case.
 */
public interface ChangePasswordUserDataAccessInterface {

    /**
     * Updates the system to record this user's password.
     * @param user the user whose password is to be updated
     */
    void changePassword(User user);
}

================
File: use_case/dashboard/DashboardDataAccessInterface.java
================
package use_case.dashboard;

import entity.CommonUser;
import entity.User;

public interface DashboardDataAccessInterface {
    void save(User user);
    User get(String username);
    void updateNutritionProgress(String username,
                                 double consumedCalories,
                                 double consumedCarbs,
                                 double consumedProtein,
                                 double consumedFat);
    boolean existsByName(String username);
}

================
File: use_case/dashboard/DashboardInputBoundary.java
================
package use_case.dashboard;

public interface DashboardInputBoundary {
    void execute(DashboardInputData inputData);
    void switchToUpdateProfile();
    void switchToMealPlanner();
    void switchToMealRecorder();
}

================
File: use_case/dashboard/DashboardInputData.java
================
package use_case.dashboard;

import entity.Allergy;
import entity.Food;
import entity.MealType;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

public class DashboardInputData {
    private final String username;
    private final LocalDate birthDate;
    private final String gender;
    private final int weight;
    private final int height;
    private final double activityMultiplier;
    private final Set<Allergy> allergies;
    private final double consumedCalories;
    private final double consumedCarbs;
    private final double consumedProtein;
    private final double consumedFat;

    public DashboardInputData(String username, LocalDate birthDate, String gender,
                              int weight, int height, double activityMultiplier,
                              Set<Allergy> allergies, double consumedCalories,
                              double consumedCarbs, double consumedProtein,
                              double consumedFat) {
        this.username = username;
        this.birthDate = birthDate;
        this.gender = gender;
        this.weight = weight;
        this.height = height;
        this.activityMultiplier = activityMultiplier;
        this.allergies = new HashSet<>(allergies);
        this.consumedCalories = consumedCalories;
        this.consumedCarbs = consumedCarbs;
        this.consumedProtein = consumedProtein;
        this.consumedFat = consumedFat;
    }

    // Getters
    public String getUsername() { return username; }
    public LocalDate getBirthDate() { return birthDate; }
    public String getGender() { return gender; }
    public int getWeight() { return weight; }
    public int getHeight() { return height; }
    public double getActivityMultiplier() { return activityMultiplier; }
    public Set<Allergy> getAllergies() { return new HashSet<>(allergies); }
    public double getConsumedCalories() { return consumedCalories; }
    public double getConsumedCarbs() { return consumedCarbs; }
    public double getConsumedProtein() { return consumedProtein; }
    public double getConsumedFat() { return consumedFat; }
}

================
File: use_case/dashboard/DashboardInteractor.java
================
package use_case.dashboard;

import entity.CommonUser;
import entity.Food;
import entity.MealType;
import use_case.dashboard.*;


import java.util.HashSet;
import java.util.Map;

public class DashboardInteractor implements DashboardInputBoundary {
    final DashboardDataAccessInterface userDataAccessObject;
    final DashboardOutputBoundary dashboardPresenter;

    public DashboardInteractor(DashboardDataAccessInterface userDataAccessInterface,
                               DashboardOutputBoundary outputBoundary) {
        this.userDataAccessObject = userDataAccessInterface;
        this.dashboardPresenter = outputBoundary;
    }

    @Override
    public void execute(DashboardInputData dashboardInputData) {
        try {
            if (!userDataAccessObject.existsByName(dashboardInputData.getUsername())) {
                dashboardPresenter.prepareFailView("User not found.");
                return;
            }

            CommonUser user = (CommonUser) userDataAccessObject.get(dashboardInputData.getUsername());

            // Update user's nutrition progress
            userDataAccessObject.updateNutritionProgress(
                    dashboardInputData.getUsername(),
                    dashboardInputData.getConsumedCalories(),
                    dashboardInputData.getConsumedCarbs(),
                    dashboardInputData.getConsumedProtein(),
                    dashboardInputData.getConsumedFat()
            );

            // Calculate nutrition goals based on user data
            double bmr = user.calculateBMR();
            double tdee = user.calculateTDEE();
            double carbsGoal = user.calculateCarbsGrams();
            double proteinGoal = user.calculateProteinGrams();
            double fatGoal = user.calculateFatGrams();

            DashboardOutputData dashboardOutputData = new DashboardOutputData(
                    user.getName(),
                    bmr,
                    tdee,
                    carbsGoal,
                    proteinGoal,
                    fatGoal,
                    dashboardInputData.getConsumedCalories(),
                    dashboardInputData.getConsumedCarbs(),
                    dashboardInputData.getConsumedProtein(),
                    dashboardInputData.getConsumedFat(),
                    user.getActivityLevel(),
                    user.getAllergies(),
                    true
            );

            dashboardPresenter.prepareSuccessView(dashboardOutputData);

        } catch (Exception e) {
            dashboardPresenter.prepareFailView(e.getMessage());
        }
    }

    @Override
    public void switchToUpdateProfile() {
        dashboardPresenter.prepareSwitchToInfoCollection();
    }


    @Override
    public void switchToMealPlanner() {
        // Similar to switchToUpdateProfile, prepare for view transition
        dashboardPresenter.prepareSuccessView(
                new DashboardOutputData("", 0, 0, 0, 0, 0, 0, 0, 0, 0, "", new HashSet<>(), true)
        );
    }

    @Override
    public void switchToMealRecorder() {
        // Similar to switchToUpdateProfile, prepare for view transition
        dashboardPresenter.prepareSuccessView(
                new DashboardOutputData("", 0, 0, 0, 0, 0, 0, 0, 0, 0, "", new HashSet<>(), true)
        );
    }
}

================
File: use_case/dashboard/DashboardOutputBoundary.java
================
package use_case.dashboard;

public interface DashboardOutputBoundary {
    void prepareSuccessView(DashboardOutputData outputData);
    void prepareSwitchToInfoCollection();
    void prepareFailView(String error);
}

================
File: use_case/dashboard/DashboardOutputData.java
================
package use_case.dashboard;

import entity.Allergy;
import entity.Food;
import entity.MealType;

import java.util.*;

//public class DashboardOutputData {
//    // User Info
//    private final String username;
//
//    // Nutrition Goals
//    private final double dailyCalorieGoal;
//    private final double carbsGoalGrams;
//    private final double proteinGoalGrams;
//    private final double fatGoalGrams;
//
//    // Current Progress
//    private final double totalCaloriesConsumed;
//    private final double totalCarbsConsumed;
//    private final double totalProteinConsumed;
//    private final double totalFatConsumed;
//
//    // Progress Percentages
//    private final int caloriePercentage;
//    private final int carbsPercentage;
//    private final int proteinPercentage;
//    private final int fatPercentage;
//
//    // Meals Organization
//    private final Map<MealType, Map<String, Food>> meals;  // type -> {name -> food}
//
//    // Success/Error State
//    private final boolean success;
//    private final String message;
//
//    public DashboardOutputData(String username,
//                               double dailyCalorieGoal,
//                               double carbsGoalGrams,
//                               double proteinGoalGrams,
//                               double fatGoalGrams,
//                               double totalCaloriesConsumed,
//                               double totalCarbsConsumed,
//                               double totalProteinConsumed,
//                               double totalFatConsumed,
//                               Map<MealType, Map<String, Food>> meals,
//                               boolean success,
//                               String message) {
//        this.username = username;
//        this.dailyCalorieGoal = dailyCalorieGoal;
//        this.carbsGoalGrams = carbsGoalGrams;
//        this.proteinGoalGrams = proteinGoalGrams;
//        this.fatGoalGrams = fatGoalGrams;
//        this.totalCaloriesConsumed = totalCaloriesConsumed;
//        this.totalCarbsConsumed = totalCarbsConsumed;
//        this.totalProteinConsumed = totalProteinConsumed;
//        this.totalFatConsumed = totalFatConsumed;
//        this.meals = new EnumMap<>(meals);
//        this.success = success;
//        this.message = message;
//
//        // Calculate percentages
//        this.caloriePercentage = calculatePercentage(totalCaloriesConsumed, dailyCalorieGoal);
//        this.carbsPercentage = calculatePercentage(totalCarbsConsumed, carbsGoalGrams);
//        this.proteinPercentage = calculatePercentage(totalProteinConsumed, proteinGoalGrams);
//        this.fatPercentage = calculatePercentage(totalFatConsumed, fatGoalGrams);
//    }
//
//    private int calculatePercentage(double current, double goal) {
//        return goal > 0 ? (int)((current / goal) * 100) : 0;
//    }
//
//    // Getters for all fields
//    public String getUsername() { return username; }
//    public double getDailyCalorieGoal() { return dailyCalorieGoal; }
//    public double getCarbsGoalGrams() { return carbsGoalGrams; }
//    public double getProteinGoalGrams() { return proteinGoalGrams; }
//    public double getFatGoalGrams() { return fatGoalGrams; }
//    public double getTotalCaloriesConsumed() { return totalCaloriesConsumed; }
//    public double getTotalCarbsConsumed() { return totalCarbsConsumed; }
//    public double getTotalProteinConsumed() { return totalProteinConsumed; }
//    public double getTotalFatConsumed() { return totalFatConsumed; }
//    public int getCaloriePercentage() { return caloriePercentage; }
//    public int getCarbsPercentage() { return carbsPercentage; }
//    public int getProteinPercentage() { return proteinPercentage; }
//    public int getFatPercentage() { return fatPercentage; }
//    public Map<MealType, Map<String, Food>> getMeals() {
//        return new EnumMap<>(meals);
//    }
//    public boolean isSuccess() { return success; }
//    public String getMessage() { return message; }
//
//    // Helper method to get meals of specific type
//    public Map<String, Food> getMealsByType(MealType type) {
//        return new HashMap<>(meals.getOrDefault(type, new HashMap<>()));
//    }
public class DashboardOutputData {
    private final String username;
    private final double bmr;
    private final double tdee;
    private final double carbsGoal;
    private final double proteinGoal;
    private final double fatGoal;
    private final double consumedCalories;
    private final double consumedCarbs;
    private final double consumedProtein;
    private final double consumedFat;
    private final String activityLevel;
    private final Set<Allergy> allergies;
    private final boolean useCaseSuccess;

    public DashboardOutputData(String username, double bmr, double tdee,
                               double carbsGoal, double proteinGoal, double fatGoal,
                               double consumedCalories, double consumedCarbs,
                               double consumedProtein, double consumedFat,
                               String activityLevel, Set<Allergy> allergies,
                               boolean useCaseSuccess) {
        this.username = username;
        this.bmr = bmr;
        this.tdee = tdee;
        this.carbsGoal = carbsGoal;
        this.proteinGoal = proteinGoal;
        this.fatGoal = fatGoal;
        this.consumedCalories = consumedCalories;
        this.consumedCarbs = consumedCarbs;
        this.consumedProtein = consumedProtein;
        this.consumedFat = consumedFat;
        this.activityLevel = activityLevel;
        this.allergies = new HashSet<>(allergies);
        this.useCaseSuccess = useCaseSuccess;
    }

    // Getters
    public String getUsername() { return username; }
    public double getBmr() { return bmr; }
    public double getTdee() { return tdee; }
    public double getCarbsGoal() { return carbsGoal; }
    public double getProteinGoal() { return proteinGoal; }
    public double getFatGoal() { return fatGoal; }
    public double getConsumedCalories() { return consumedCalories; }
    public double getConsumedCarbs() { return consumedCarbs; }
    public double getConsumedProtein() { return consumedProtein; }
    public double getConsumedFat() { return consumedFat; }
    public String getActivityLevel() { return activityLevel; }
    public Set<Allergy> getAllergies() { return new HashSet<>(allergies); }
    public boolean isUseCaseSuccess() { return useCaseSuccess; }

}

================
File: use_case/info_collection/InfoCollectionInputBoundary.java
================
package use_case.info_collection;

/**
 * Input Boundary for actions which are related to logging in.
 */
public interface InfoCollectionInputBoundary {

    /**
     * Executes the Logout use case.
     * @param infoCollectionInputData the input data
     */
    void execute(InfoCollectionInputData infoCollectionInputData);
}

================
File: use_case/info_collection/InfoCollectionInputData.java
================
package use_case.info_collection;

import entity.Allergy;

import java.time.LocalDate;
import java.util.Set;

/**
 * The Input Data for the Logout Use Case.
 */

public class InfoCollectionInputData {

    private final String username;
    private final String password;
    private final LocalDate birthDate;
    private final String gender;
    private final int weight;
    private final int height;
    private final double activityMultiplier;
    private final Set<Allergy> allergies;

    public InfoCollectionInputData(String username, String password, LocalDate birthDate,
                                   String gender, int weight, int height, double activityMultiplier, Set<Allergy> allergies) {
        this.username = username;
        this.password = password;
        this.birthDate = birthDate;
        this.gender = gender;
        this.weight = weight;
        this.height = height;
        this.activityMultiplier = activityMultiplier;
        this.allergies = allergies;
    }


    public String getUsername() { return username; }

    public String getPassword() { return password; }

    public LocalDate getBirthDate() { return birthDate; }

    public String getGender() { return gender; }

    public int getWeight() { return weight; }

    public int getHeight() { return height; }

    public double getActivityMultiplier() { return activityMultiplier; }

    public Set<Allergy> getAllergies() { return allergies; }
}

================
File: use_case/info_collection/InfoCollectionInteractor.java
================
package use_case.info_collection;

import entity.CommonUserFactory;
import entity.User;
import entity.UserFactory;
import entity.CommonUser;

public class InfoCollectionInteractor implements InfoCollectionInputBoundary {
    final InfoCollectionUserDataAccessInterface userDataAccessObject;
    final InfoCollectionOutputBoundary infoCollectionPresenter;
    final CommonUserFactory userFactory;

    public InfoCollectionInteractor(
            InfoCollectionUserDataAccessInterface userDataAccessInterface,
            InfoCollectionOutputBoundary infoOutputBoundary,
            UserFactory userFactory) {
        this.userDataAccessObject = userDataAccessInterface;
        this.infoCollectionPresenter = infoOutputBoundary;
        this.userFactory = (CommonUserFactory) userFactory;
    }

    @Override
    public void execute(InfoCollectionInputData infoCollectionInputData) {
        try {
            if (userDataAccessObject.existsByName(infoCollectionInputData.getUsername())) {
                User existingUser = userDataAccessObject.get(infoCollectionInputData.getUsername());
                if (existingUser != null && !existingUser.getPassword().equals(infoCollectionInputData.getPassword())) {
                    infoCollectionPresenter.prepareFailView("Incorrect password for existing user.");
                    return;
                }
            }

            // Validate inputs
            int currentYear = java.time.LocalDate.now().getYear();
            int age = currentYear - infoCollectionInputData.getBirthDate().getYear();
            if (age < 13 || age > 120) {
                infoCollectionPresenter.prepareFailView("Invalid age. Must be between 13 and 120 years old.");
                return;
            }

            if (infoCollectionInputData.getWeight() < 30 || infoCollectionInputData.getWeight() > 300) {
                infoCollectionPresenter.prepareFailView("Invalid weight. Must be between 30 and 300 kg.");
                return;
            }

            if (infoCollectionInputData.getHeight() < 100 || infoCollectionInputData.getHeight() > 250) {
                infoCollectionPresenter.prepareFailView("Invalid height. Must be between 100 and 250 cm.");
                return;
            }

            if (!infoCollectionInputData.getGender().equals("Male") &&
                    !infoCollectionInputData.getGender().equals("Female")) {
                infoCollectionPresenter.prepareFailView("Gender must be either 'Male' or 'Female'.");
                return;
            }

            User user = userFactory.createWithInfo(
                    infoCollectionInputData.getUsername(),
                    infoCollectionInputData.getPassword(),
                    infoCollectionInputData.getBirthDate(),
                    infoCollectionInputData.getGender(),
                    infoCollectionInputData.getWeight(),
                    infoCollectionInputData.getHeight(),
                    infoCollectionInputData.getActivityMultiplier(),
                    infoCollectionInputData.getAllergies()
            );

            userDataAccessObject.save(user);

            CommonUser commonUser = (CommonUser) user;

            InfoCollectionOutputData infoCollectionOutputData = new InfoCollectionOutputData(
                    user.getName(),
                    infoCollectionInputData.getBirthDate(),
                    infoCollectionInputData.getGender(),
                    infoCollectionInputData.getWeight(),
                    infoCollectionInputData.getHeight(),
                    infoCollectionInputData.getActivityMultiplier(),
                    infoCollectionInputData.getAllergies(),
                    commonUser.calculateBMR(),
                    commonUser.calculateTDEE(),
                    true,
                    null
            );

            infoCollectionPresenter.prepareSuccessView(infoCollectionOutputData);

        } catch (Exception e) {
            infoCollectionPresenter.prepareFailView(e.getMessage());
        }
    }
}

================
File: use_case/info_collection/InfoCollectionOutputBoundary.java
================
package use_case.info_collection;

/**
 * The output boundary for the Login Use Case.
 */
public interface InfoCollectionOutputBoundary {
    /**
     * Prepares the success view for the Login Use Case.
     * @param outputData the output data
     */
    void prepareSuccessView(InfoCollectionOutputData outputData);

    /**
     * Prepares the failure view for the Login Use Case.
     * @param errorMessage the explanation of the failure
     */
    void prepareFailView(String errorMessage);
}

================
File: use_case/info_collection/InfoCollectionOutputData.java
================
package use_case.info_collection;

import entity.Allergy;
import java.time.LocalDate;
import java.util.Set;

public class InfoCollectionOutputData {
    private final String username;
    private final LocalDate birthDate;
    private final String gender;
    private final int weight;
    private final int height;
    private final double activityMultiplier;
    private final Set<Allergy> allergies;
    private final double calculatedBMR;
    private final double calculatedTDEE;
    private final boolean useCaseSuccess;
    private final String errorMessage;

    public InfoCollectionOutputData(String username, LocalDate birthDate,
                                    String gender, int weight, int height,
                                    double activityMultiplier, Set<Allergy> allergies,
                                    double calculatedBMR, double calculatedTDEE,
                                    boolean useCaseSuccess, String errorMessage) {
        this.username = username;
        this.birthDate = birthDate;
        this.gender = gender;
        this.weight = weight;
        this.height = height;
        this.activityMultiplier = activityMultiplier;
        this.allergies = allergies;
        this.calculatedBMR = calculatedBMR;
        this.calculatedTDEE = calculatedTDEE;
        this.useCaseSuccess = useCaseSuccess;
        this.errorMessage = errorMessage;
    }

    // Getters
    public String getUsername() { return username; }
    public LocalDate getBirthDate() { return birthDate; }
    public String getGender() { return gender; }
    public int getWeight() { return weight; }
    public int getHeight() { return height; }
    public double getActivityMultiplier() { return activityMultiplier; }
    public Set<Allergy> getAllergies() { return allergies; }
    public double getCalculatedBMR() { return calculatedBMR; }
    public double getCalculatedTDEE() { return calculatedTDEE; }
    public boolean isUseCaseSuccess() { return useCaseSuccess; }
    public String getErrorMessage() { return errorMessage; }
}

================
File: use_case/info_collection/InfoCollectionUserDataAccessInterface.java
================
package use_case.info_collection;

import entity.User;

public interface InfoCollectionUserDataAccessInterface {
    void save(User user);
    User get(String username);
    boolean existsByName(String username);
}

================
File: use_case/login/LoginInputBoundary.java
================
package use_case.login;

/**
 * Input Boundary for actions which are related to logging in.
 */
public interface LoginInputBoundary {

    /**
     * Executes the login use case.
     * @param loginInputData the input data
     */
    void execute(LoginInputData loginInputData);
}

================
File: use_case/login/LoginInputData.java
================
package use_case.login;

/**
 * The Input Data for the Login Use Case.
 */
//public class LoginInputData {
//
//    private final String username;
//    private final String password;
//
//    public LoginInputData(String username, String password) {
//        this.username = username;
//        this.password = password;
//    }
//
//    String getUsername() {
//        return username;
//    }
//
//    String getPassword() {
//        return password;
//    }
//
//}

public class LoginInputData {
    private final String username;
    private final String password;

    public LoginInputData(String username, String password) {
        this.username = username;
        this.password = password;
    }

    String getUsername() {
        return username;
    }

    String getPassword() {
        return password;
    }
}

================
File: use_case/login/LoginInteractor.java
================
package use_case.login;

import entity.User;
import entity.CommonUser;

public class LoginInteractor implements LoginInputBoundary {
    private final LoginUserDataAccessInterface userDataAccessObject;
    private final LoginOutputBoundary loginPresenter;

    public LoginInteractor(LoginUserDataAccessInterface userDataAccessObject,
                           LoginOutputBoundary loginPresenter) {
        this.userDataAccessObject = userDataAccessObject;
        this.loginPresenter = loginPresenter;
    }

    @Override
    public void execute(LoginInputData loginInputData) {
        String username = loginInputData.getUsername();
        String password = loginInputData.getPassword();

        if (!userDataAccessObject.existsByName(username)) {
            loginPresenter.prepareFailView(username + ": Account does not exist.");
            return;
        }

        User user = userDataAccessObject.get(username);
        if (!password.equals(user.getPassword())) {
            loginPresenter.prepareFailView("Incorrect password for \"" + username + "\".");
            return;
        }

        userDataAccessObject.setCurrentUsername(username);

        CommonUser commonUser = null;
        boolean isProfileComplete = false;

        if (user instanceof CommonUser) {
            commonUser = (CommonUser) user;
            isProfileComplete = checkProfileComplete(commonUser);
        }

        LoginOutputData loginOutputData = new LoginOutputData(
                username,
                commonUser,
                isProfileComplete
        );

        loginPresenter.prepareSuccessView(loginOutputData);
    }

    private boolean checkProfileComplete(CommonUser user) {
        if (user == null) {
            return false;
        }
        return user.getBirthDate() != null &&
                !user.getGender().isEmpty() &&
                user.getWeight() > 0 &&
                user.getHeight() > 0 &&
                user.getActivityMultiplier() > 0;
    }
}

================
File: use_case/login/LoginOutputBoundary.java
================
package use_case.login;

/**
 * The output boundary for the Login Use Case.
 */
public interface LoginOutputBoundary {
    /**
     * Prepares the success view for the Login Use Case.
     * @param outputData the output data
     */
    void prepareSuccessView(LoginOutputData outputData);

    void prepareRedirectToInfoCollection(LoginOutputData outputData);

    /**
     * Prepares the failure view for the Login Use Case.
     * @param errorMessage the explanation of the failure
     */
    void prepareFailView(String errorMessage);

}

================
File: use_case/login/LoginOutputData.java
================
package use_case.login;

import entity.CommonUser;

/**
 * Output Data for the Login Use Case.
 */
public class LoginOutputData {
    private final String username;
    private final boolean profileComplete;
    private final CommonUser user;

    public LoginOutputData(String username, CommonUser user, boolean profileComplete) {
        this.username = username;
        this.user = user;
        this.profileComplete = profileComplete;
    }

    public String getUsername() {
        return username;
    }

    public CommonUser getUser() {
        return user;
    }

    public boolean isProfileComplete() {
        return profileComplete;
    }
}

================
File: use_case/login/LoginUserDataAccessInterface.java
================
package use_case.login;

import entity.User;

/**
 * DAO for the Login Use Case.
 */
public interface LoginUserDataAccessInterface {

    /**
     * Checks if the given username exists.
     * @param username the username to look for
     * @return true if a user with the given username exists; false otherwise
     */
    boolean existsByName(String username);

    /**
     * Saves the user.
     * @param user the user to save
     */
    void save(User user);

    /**
     * Returns the user with the given username.
     * @param username the username to look up
     * @return the user with the given username
     */
    User get(String username);

    /**
     * Returns the username of the curren user of the application.
     * @return the username of the current user; null indicates that no one is logged into the application.
     */
    String getCurrentUsername();

    /**
     * Sets the username indicating who is the current user of the application.
     * @param username the new current username; null to indicate that no one is currently logged into the application.
     */
    void setCurrentUsername(String username);
}

================
File: use_case/logout/LogoutInputBoundary.java
================
package use_case.logout;

/**
 * Input Boundary for actions which are related to logging in.
 */
public interface LogoutInputBoundary {

    /**
     * Executes the Logout use case.
     * @param LogoutInputData the input data
     */
    void execute(LogoutInputData LogoutInputData);
}

================
File: use_case/logout/LogoutInputData.java
================
package use_case.logout;

/**
 * The Input Data for the Logout Use Case.
 */
public class LogoutInputData {

    String username;

    public LogoutInputData(String username) {
        this.username = username;
    }

    public String getUsername() {
        return username;
    }

}

================
File: use_case/logout/LogoutInteractor.java
================
package use_case.logout;

/**
 * The Logout Interactor.
 */
//public class LogoutInteractor implements LogoutInputBoundary {
//    private LogoutUserDataAccessInterface userDataAccessObject;
//    private LogoutOutputBoundary logoutPresenter;
//
//    public LogoutInteractor(LogoutUserDataAccessInterface userDataAccessInterface,
//                            LogoutOutputBoundary logoutOutputBoundary) {
//        this.logoutPresenter = logoutOutputBoundary;
//        this.userDataAccessObject = userDataAccessInterface;
//    }
//
//    @Override
//    public void execute(LogoutInputData logoutInputData) {
//        // * get the username out of the input data,
//        final String username = logoutInputData.username;
//        // * set the username to null in the DAO
//        userDataAccessObject.setCurrentUsername(null);
//        // * instantiate the `LogoutOutputData`, which needs to contain the username.
//        final LogoutOutputData logoutOutputData = new LogoutOutputData(username, true);
//        // * tell the presenter to prepare a success view.
//        logoutPresenter.prepareSuccessView(logoutOutputData);
//    }

import entity.CommonUser;
import entity.User;

public class LogoutInteractor implements LogoutInputBoundary {
    private final LogoutUserDataAccessInterface userDataAccessObject;
    private final LogoutOutputBoundary logoutPresenter;

    public LogoutInteractor(LogoutUserDataAccessInterface userDataAccessInterface,
                            LogoutOutputBoundary logoutOutputBoundary) {
        this.userDataAccessObject = userDataAccessInterface;
        this.logoutPresenter = logoutOutputBoundary;
    }

    @Override
    public void execute(LogoutInputData logoutInputData) {
        final String username = logoutInputData.getUsername();

        // Get user data before logging out
        User user = userDataAccessObject.get(username);
        CommonUser commonUser = (user instanceof CommonUser) ? (CommonUser) user : null;
        boolean isProfileComplete = false;

        if (commonUser != null) {
            isProfileComplete = checkProfileComplete(commonUser);
        }

        // Set current user to null (logout)
        userDataAccessObject.setCurrentUsername(null);

        // Create output data with all required information
        final LogoutOutputData logoutOutputData = new LogoutOutputData(
                username,    // username being logged out
                commonUser, // user data if needed for view transition
                isProfileComplete,  // profile status
                false       // useCase didn't fail
        );

        logoutPresenter.prepareSuccessView(logoutOutputData);
    }

    private boolean checkProfileComplete(CommonUser user) {
        return user.getBirthDate() != null &&
                !user.getGender().isEmpty() &&
                user.getWeight() > 0 &&
                user.getHeight() > 0 &&
                user.getActivityMultiplier() > 0;
    }
}

================
File: use_case/logout/LogoutOutputBoundary.java
================
package use_case.logout;

/**
 * The output boundary for the Login Use Case.
 */
public interface LogoutOutputBoundary {
    /**
     * Prepares the success view for the Login Use Case.
     * @param outputData the output data
     */
    void prepareSuccessView(LogoutOutputData outputData);

    /**
     * Prepares the failure view for the Login Use Case.
     * @param errorMessage the explanation of the failure
     */
    void prepareFailView(String errorMessage);
}

================
File: use_case/logout/LogoutOutputData.java
================
package use_case.logout;

import entity.CommonUser;

public class LogoutOutputData {
    private final String username;
    private final CommonUser user;
    private final boolean profileComplete;
    private final boolean useCaseFailed;

    public LogoutOutputData(String username, CommonUser user,
                            boolean profileComplete, boolean useCaseFailed) {
        this.username = username;
        this.user = user;
        this.profileComplete = profileComplete;
        this.useCaseFailed = useCaseFailed;
    }

    public String getUsername() {
        return username;
    }

    public CommonUser getUser() {
        return user;
    }

    public boolean isProfileComplete() {
        return profileComplete;
    }

    public boolean isUseCaseFailed() {
        return useCaseFailed;
    }
}

================
File: use_case/logout/LogoutUserDataAccessInterface.java
================
package use_case.logout;

import entity.User;

/**
 * Interface for the data access operations needed by the Logout use case.
 */
public interface LogoutUserDataAccessInterface {
    /**
     * Returns the username of the current user of the application.
     * @return the username of the current user
     */
    String getCurrentUsername();

    /**
     * Sets the username indicating who is the current user of the application.
     * @param username the new current username
     */
    void setCurrentUsername(String username);

    /**
     * Gets a user by their username.
     * @param username the username to look up
     * @return the User with the given username
     */
    User get(String username);

    /**
     * Checks if a user exists by their username.
     * @param username the username to check
     * @return true if the user exists, false otherwise
     */
    boolean existsByName(String username);
}

================
File: use_case/signup/SignupInputBoundary.java
================
package use_case.signup;

/**
 * Input Boundary for actions which are related to signing up.
 */
public interface SignupInputBoundary {

    /**
     * Executes the signup use case.
     * @param signupInputData the input data
     */
    void execute(SignupInputData signupInputData);

    /**
     * Executes the switch to login view use case.
     */
    void switchToLoginView();
}

================
File: use_case/signup/SignupInputData.java
================
package use_case.signup;

/**
 * The Input Data for the Signup Use Case.
 */
public class SignupInputData {

    private final String username;
    private final String password;
    private final String repeatPassword;

    public SignupInputData(String username, String password, String repeatPassword) {
        this.username = username;
        this.password = password;
        this.repeatPassword = repeatPassword;
    }

    String getUsername() {
        return username;
    }

    String getPassword() {
        return password;
    }

    public String getRepeatPassword() {
        return repeatPassword;
    }
}

================
File: use_case/signup/SignupInteractor.java
================
package use_case.signup;

import entity.User;
import entity.UserFactory;

/**
 * The Signup Interactor.
 */
public class SignupInteractor implements SignupInputBoundary {
    private final SignupUserDataAccessInterface userDataAccessObject;
    private final SignupOutputBoundary userPresenter;
    private final UserFactory userFactory;

    public SignupInteractor(SignupUserDataAccessInterface signupDataAccessInterface,
                            SignupOutputBoundary signupOutputBoundary,
                            UserFactory userFactory) {
        this.userDataAccessObject = signupDataAccessInterface;
        this.userPresenter = signupOutputBoundary;
        this.userFactory = userFactory;
    }

    @Override
    public void execute(SignupInputData signupInputData) {
        if (userDataAccessObject.existsByName(signupInputData.getUsername())) {
            userPresenter.prepareFailView("User already exists.");
        }
        else if (!signupInputData.getPassword().equals(signupInputData.getRepeatPassword())) {
            userPresenter.prepareFailView("Passwords don't match.");
        }
        else {
            final User user = userFactory.create(signupInputData.getUsername(), signupInputData.getPassword());
            userDataAccessObject.save(user);

            final SignupOutputData signupOutputData = new SignupOutputData(user.getName(), signupInputData.getPassword(),
                    false);
            userPresenter.prepareSuccessView(signupOutputData);
        }
    }

    @Override
    public void switchToLoginView() {
        userPresenter.switchToLoginView();
    }
}

================
File: use_case/signup/SignupOutputBoundary.java
================
package use_case.signup;

/**
 * The output boundary for the Signup Use Case.
 */
public interface SignupOutputBoundary {

    /**
     * Prepares the success view for the Signup Use Case.
     * @param outputData the output data
     */
    void prepareSuccessView(SignupOutputData outputData);

    /**
     * Prepares the failure view for the Signup Use Case.
     * @param errorMessage the explanation of the failure
     */
    void prepareFailView(String errorMessage);

    /**
     * Switches to the Login View.
     */
    void switchToLoginView();
}

================
File: use_case/signup/SignupOutputData.java
================
package use_case.signup;

/**
 * Output Data for the Signup Use Case.
 */

public class SignupOutputData {
    private final String username;
    private final String password;  // Added this field
    private final boolean useCaseFailed;

    public SignupOutputData(String username, String password, boolean useCaseFailed) {  // Added password parameter
        this.username = username;
        this.password = password;  // Store password
        this.useCaseFailed = useCaseFailed;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {  // Add getter for password
        return password;
    }

    public boolean isUseCaseFailed() {
        return useCaseFailed;
    }
}

================
File: use_case/signup/SignupUserDataAccessInterface.java
================
package use_case.signup;

import entity.User;

/**
 * DAO for the Signup Use Case.
 */
public interface SignupUserDataAccessInterface {

    /**
     * Checks if the given username exists.
     * @param username the username to look for
     * @return true if a user with the given username exists; false otherwise
     */
    boolean existsByName(String username);

    /**
     * Saves the user.
     * @param user the user to save
     */
    void save(User user);
}

================
File: util/ApiConfig.java
================
package util;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

public class ApiConfig {
    private static Properties properties;
    private static final String CONFIG_FILE = "src/res/config.properties";

    static {
        properties = new Properties();
        try {
            // Load using direct file path instead of classpath
            properties.load(Files.newInputStream(Paths.get(CONFIG_FILE)));
        } catch (IOException e) {
            throw new RuntimeException("Error loading configuration", e);
        }
    }

    public static String getEdamamAppId() {
        return properties.getProperty("edamam.app.id");
    }

    public static String getEdamamAppKey() {
        return properties.getProperty("edamam.app.key");
    }
}

================
File: view/DashboardView.java
================
package view;

import interface_adapter.dashboard.*;
import interface_adapter.logout.LogoutController;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class DashboardView extends JPanel implements ActionListener, PropertyChangeListener {
    public final String viewName = "dashboard";
    private final DashboardViewModel dashboardViewModel;
    private DashboardController dashboardController;
    private LogoutController logoutController;

    // UI Components
    private final JLabel titleLabel;
    private final JLabel welcomeLabel;
    private final JLabel activityLabel;
    private final NutritionProgressPanel nutritionPanel;
    private final JButton updateProfileButton;
    private final JButton generateMealButton;
    private final JButton recordMealButton;
    private final JButton logoutButton;
    private final JLabel errorLabel;

    public DashboardView(DashboardViewModel viewModel) {
        this.dashboardViewModel = viewModel;
        this.dashboardViewModel.addPropertyChangeListener(this);

        // Use simple BorderLayout as base
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Initialize components
        titleLabel = new JLabel(DashboardViewModel.TITLE_LABEL);
        welcomeLabel = new JLabel();
        activityLabel = new JLabel();
        nutritionPanel = new NutritionProgressPanel();
        updateProfileButton = new JButton(DashboardViewModel.UPDATE_PROFILE_BUTTON_LABEL);
        generateMealButton = new JButton(DashboardViewModel.GENERATE_MEAL_BUTTON_LABEL);
        recordMealButton = new JButton(DashboardViewModel.RECORD_MEAL_BUTTON_LABEL);
        logoutButton = new JButton("Logout");
        errorLabel = new JLabel();

        // Style components
        styleComponents();

        // Layout components using the simplified approach
        layoutComponents();

        // Add listeners
        addListeners();
    }

    private void styleComponents() {
        // Title styling
        titleLabel.setFont(new Font(titleLabel.getFont().getName(), Font.BOLD, 24));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);

        // Welcome label styling
        welcomeLabel.setFont(new Font(welcomeLabel.getFont().getName(), Font.BOLD, 18));

        // Activity label styling
        activityLabel.setFont(new Font(activityLabel.getFont().getName(), Font.PLAIN, 14));

        // Error label styling
        errorLabel.setForeground(Color.RED);
        errorLabel.setHorizontalAlignment(SwingConstants.CENTER);

        // Button styling - keep buttons at fixed size
        Dimension buttonSize = new Dimension(150, 40);
        updateProfileButton.setPreferredSize(buttonSize);
        generateMealButton.setPreferredSize(buttonSize);
        recordMealButton.setPreferredSize(buttonSize);
        logoutButton.setPreferredSize(buttonSize);
    }

    private void layoutComponents() {
        // Header panel using BoxLayout
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        welcomeLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        activityLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.add(titleLabel);
        headerPanel.add(Box.createVerticalStrut(10));
        headerPanel.add(welcomeLabel);
        headerPanel.add(Box.createVerticalStrut(5));
        headerPanel.add(activityLabel);

        // Button panel using GridLayout like in simplified version
        JPanel buttonPanel = new JPanel(new GridLayout(1, 4, 10, 0));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        buttonPanel.add(updateProfileButton);
        buttonPanel.add(generateMealButton);
        buttonPanel.add(recordMealButton);
        buttonPanel.add(logoutButton);

        // Add everything to main panel
        add(headerPanel, BorderLayout.NORTH);
        add(nutritionPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void addListeners() {
        updateProfileButton.addActionListener(this);
        generateMealButton.addActionListener(this);
        recordMealButton.addActionListener(this);
        logoutButton.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() == updateProfileButton) {
            dashboardController.onUpdateProfile();
        } else if (evt.getSource() == generateMealButton) {
            dashboardController.onGenerateMeal();
        } else if (evt.getSource() == recordMealButton) {
            dashboardController.onRecordMeal();
        } else if (evt.getSource() == logoutButton && logoutController != null) {
            String username = welcomeLabel.getText().replace("Welcome, ", "");
            logoutController.execute(username);
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("state")) {
            updateFromViewModel();
        }
    }

    private void updateFromViewModel() {
        DashboardState state = (DashboardState) dashboardViewModel.getState();
        if (state != null) {
            welcomeLabel.setText(DashboardViewModel.WELCOME_LABEL + state.getUsername());
            activityLabel.setText("Activity Level: " + state.getActivityLevel());
            errorLabel.setText(state.getError());

            nutritionPanel.updateProgress(
                    state.getCaloriePercentage(),
                    state.getCarbsPercentage(),
                    state.getProteinPercentage(),
                    state.getFatPercentage(),
                    state.getFormattedCalorieProgress(),
                    state.getFormattedCarbsProgress(),
                    state.getFormattedProteinProgress(),
                    state.getFormattedFatProgress()
            );
        }
    }

    public void setDashboardController(DashboardController controller) {
        this.dashboardController = controller;
    }

    public void setLogoutController(LogoutController controller) {
        this.logoutController = controller;
    }

    public String getViewName() {
        return viewName;
    }
}

================
File: view/InfoCollectionView.java
================
package view;

import entity.Allergy;
import interface_adapter.ViewManagerModel;
import interface_adapter.info_collection.InfoCollectionController;
import interface_adapter.info_collection.InfoCollectionState;
import interface_adapter.info_collection.InfoCollectionViewModel;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class InfoCollectionView extends JPanel implements ActionListener, PropertyChangeListener {
    private final String viewName = "info collection";
    private final InfoCollectionViewModel infoCollectionViewModel;
    private InfoCollectionController infoCollectionController;
    private final ViewManagerModel viewManagerModel;

    // Input Components
    private final JTextField yearOfBirthField = new JTextField(15);
    private final JComboBox<String> genderField = new JComboBox<>(new String[]{"Male", "Female"});
    private final JTextField weightField = new JTextField(15);
    private final JTextField heightField = new JTextField(15);
    private final JComboBox<String> activityField;
    private final JPanel allergyPanel;
    private final Map<Allergy, JCheckBox> allergyCheckboxes = new HashMap<>();
    private final JButton toggleAllergiesButton;
    private final JButton saveButton = new JButton(InfoCollectionViewModel.SAVE_BUTTON_LABEL);
    private final JButton cancelButton = new JButton(InfoCollectionViewModel.CANCEL_BUTTON_LABEL);

    // Error Labels
    private final JLabel yearOfBirthErrorField = new JLabel();
    private final JLabel weightErrorField = new JLabel();
    private final JLabel heightErrorField = new JLabel();

    // Activity level mapping
    private final Map<String, Double> activityMultipliers = new HashMap<>();
    {
        activityMultipliers.put("Sedentary (little or no exercise)", 1.2);
        activityMultipliers.put("Lightly active (light exercise 1-3 days/week)", 1.375);
        activityMultipliers.put("Moderately active (moderate exercise 3-5 days/week)", 1.55);
        activityMultipliers.put("Very active (hard exercise 6-7 days/week)", 1.725);
        activityMultipliers.put("Super active (very hard exercise/physical job)", 1.9);
    }

    public InfoCollectionView(InfoCollectionViewModel viewModel, ViewManagerModel viewManagerModel) {
        this.infoCollectionViewModel = viewModel;
        this.viewManagerModel = viewManagerModel;
        this.infoCollectionViewModel.addPropertyChangeListener(this);

        // Initialize remaining components
        activityField = new JComboBox<>(activityMultipliers.keySet().toArray(new String[0]));
        allergyPanel = new JPanel();
        toggleAllergiesButton = new JButton(InfoCollectionViewModel.ALLERGIES_LABEL);

        JPanel mainContentPanel = new JPanel();
        mainContentPanel.setLayout(new BoxLayout(mainContentPanel, BoxLayout.Y_AXIS));
        mainContentPanel.setPreferredSize(new Dimension(500, mainContentPanel.getPreferredSize().height));
        mainContentPanel.setMaximumSize(new Dimension(500, Integer.MAX_VALUE));

        // Set error label colors
        yearOfBirthErrorField.setForeground(Color.RED);
        weightErrorField.setForeground(Color.RED);
        heightErrorField.setForeground(Color.RED);


        // Add title
        JLabel title = new JLabel(InfoCollectionViewModel.TITLE_LABEL);
        title.setAlignmentX(Component.CENTER_ALIGNMENT);
        title.setFont(new Font(title.getFont().getName(), Font.BOLD, 16));
        mainContentPanel.add(title);
        mainContentPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        // Add form panels
        JPanel formPanel = createBasicInfoPanel();
        formPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainContentPanel.add(formPanel);
        mainContentPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        // Add allergy section
        JPanel allergySection = createAllergyPanel();
        allergySection.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainContentPanel.add(allergySection);
        mainContentPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        // Add buttons
        JPanel buttonPanel = createButtonPanel();
        buttonPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainContentPanel.add(buttonPanel);

        // Add padding around the main content
        mainContentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Create scroll pane for the entire view
        JScrollPane scrollPane = new JScrollPane(mainContentPanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setBorder(null);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);

        // Set up the main panel
        setLayout(new BorderLayout());
        add(scrollPane, BorderLayout.CENTER);

        // Set preferred size for initial window sizing
        setPreferredSize(new Dimension(600, 500));

        setupListeners();
    }

    private JPanel createBasicInfoPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Year of Birth
        addFormRow(panel, gbc, 0, InfoCollectionViewModel.BIRTH_YEAR_LABEL,
                yearOfBirthField, yearOfBirthErrorField);

        // Gender
        addFormRow(panel, gbc, 1, InfoCollectionViewModel.GENDER_LABEL,
                genderField, null);

        // Weight
        addFormRow(panel, gbc, 2, InfoCollectionViewModel.WEIGHT_LABEL,
                weightField, weightErrorField);

        // Height
        addFormRow(panel, gbc, 3, InfoCollectionViewModel.HEIGHT_LABEL,
                heightField, heightErrorField);

        // Activity Level
        addFormRow(panel, gbc, 4, InfoCollectionViewModel.ACTIVITY_LABEL,
                activityField, null);

        // Make the panel maintain its size
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, panel.getPreferredSize().height));

        return panel;
    }

    private void addFormRow(JPanel panel, GridBagConstraints gbc, int row,
                            String label, JComponent field, JComponent error) {
        gbc.gridx = 0;
        gbc.gridy = row;
        gbc.weightx = 0;
        panel.add(new JLabel(label), gbc);

        gbc.gridx = 1;
        gbc.weightx = 1;
        panel.add(field, gbc);

        if (error != null) {
            gbc.gridx = 2;
            gbc.weightx = 0;
            panel.add(error, gbc);
        }
    }

    private JPanel createAllergyPanel() {
        JPanel containerPanel = new JPanel();
        containerPanel.setLayout(new BoxLayout(containerPanel, BoxLayout.Y_AXIS));

        // Create allergy panel with flow layout for better wrapping
        allergyPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 5));
        allergyPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        // Create checkboxes for each allergy
        for (Allergy allergy : Allergy.values()) {
            JPanel itemPanel = new JPanel();
            itemPanel.setLayout(new BoxLayout(itemPanel, BoxLayout.X_AXIS));

            JCheckBox checkBox = new JCheckBox(allergy.getDisplayName());
            allergyCheckboxes.put(allergy, checkBox);
            itemPanel.add(checkBox);

            JButton infoButton = new JButton("i");
            infoButton.setPreferredSize(new Dimension(20, 20));
            infoButton.addActionListener(e -> showAllergyInfo(allergy));
            itemPanel.add(infoButton);

            allergyPanel.add(itemPanel);
        }

        // Initially hide the allergy panel
        allergyPanel.setVisible(false);

        // Add toggle button and allergy panel to container
        toggleAllergiesButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        containerPanel.add(toggleAllergiesButton);
        containerPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        containerPanel.add(allergyPanel);

        return containerPanel;
    }

    private JPanel createButtonPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        panel.add(saveButton);
        panel.add(Box.createRigidArea(new Dimension(10, 0)));
        panel.add(cancelButton);
        return panel;
    }

    private void setupListeners() {
        toggleAllergiesButton.addActionListener(e -> {
            boolean isVisible = !allergyPanel.isVisible();
            allergyPanel.setVisible(isVisible);
            toggleAllergiesButton.setText(isVisible ? "Hide Allergies & Preferences" : InfoCollectionViewModel.ALLERGIES_LABEL);
            revalidate();
            repaint();
        });

        saveButton.addActionListener(e -> {
            if (validateInput()) {
                Set<Allergy> selectedAllergies = new HashSet<>();
                allergyCheckboxes.forEach((allergy, checkbox) -> {
                    if (checkbox.isSelected()) {
                        selectedAllergies.add(allergy);
                    }
                });

                infoCollectionController.execute(
                        infoCollectionViewModel.getState().getUsername(),
                        infoCollectionViewModel.getState().getPassword(),
                        Integer.parseInt(yearOfBirthField.getText()),
                        (String) genderField.getSelectedItem(),
                        Integer.parseInt(weightField.getText()),
                        Integer.parseInt(heightField.getText()),
                        activityMultipliers.get(activityField.getSelectedItem()),
                        selectedAllergies
                );
            }
        });

        cancelButton.addActionListener(this);

        // Add document listeners for text fields
        addTextFieldListener(yearOfBirthField, "yearOfBirth");
        addTextFieldListener(weightField, "weight");
        addTextFieldListener(heightField, "height");
    }

    private void addTextFieldListener(JTextField textField, String fieldName) {
        textField.getDocument().addDocumentListener(new DocumentListener() {
            private void updateState() {
                InfoCollectionState currentState = infoCollectionViewModel.getState();
                try {
                    int value = Integer.parseInt(textField.getText());
                    switch (fieldName) {
                        case "yearOfBirth" -> currentState.setYearOfBirth(value);
                        case "weight" -> currentState.setWeight(value);
                        case "height" -> currentState.setHeight(value);
                    }
                } catch (NumberFormatException ignored) {
                    // Handle in validation
                }
                infoCollectionViewModel.setState(currentState);
            }

            @Override
            public void insertUpdate(DocumentEvent e) { updateState(); }
            @Override
            public void removeUpdate(DocumentEvent e) { updateState(); }
            @Override
            public void changedUpdate(DocumentEvent e) { updateState(); }
        });
    }

    private boolean validateInput() {
        boolean isValid = true;

        try {
            int yearOfBirth = Integer.parseInt(yearOfBirthField.getText());
            int age = LocalDate.now().getYear() - yearOfBirth;
            if (age < 13 || age > 120) {
                yearOfBirthErrorField.setText("Invalid age range (13-120)");
                isValid = false;
            } else {
                yearOfBirthErrorField.setText("");
            }
        } catch (NumberFormatException e) {
            yearOfBirthErrorField.setText("Invalid year");
            isValid = false;
        }

        try {
            int weight = Integer.parseInt(weightField.getText());
            if (weight < 30 || weight > 200) {
                weightErrorField.setText("Invalid weight (30-200 kg)");
                isValid = false;
            } else {
                weightErrorField.setText("");
            }
        } catch (NumberFormatException e) {
            weightErrorField.setText("Invalid weight");
            isValid = false;
        }

        try {
            int height = Integer.parseInt(heightField.getText());
            if (height < 100 || height > 250) {
                heightErrorField.setText("Invalid height (100-250 cm)");
                isValid = false;
            } else {
                heightErrorField.setText("");
            }
        } catch (NumberFormatException e) {
            heightErrorField.setText("Invalid height");
            isValid = false;
        }

        return isValid;
    }

    private void showAllergyInfo(Allergy allergy) {
        String info = getAllergyInfo(allergy);
        JOptionPane.showMessageDialog(this, info,
                allergy.getDisplayName() + " Information",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private String getAllergyInfo(Allergy allergy) {
        return switch (allergy) {
            case DAIRY -> "Products free from milk and milk derivatives.";
            case GLUTEN -> "Products free from wheat, barley, rye, and their derivatives.";
            case PEANUT -> "Products free from peanuts and peanut derivatives.";
            default -> "Products free from " + allergy.getDisplayName().toLowerCase();
        };
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource().equals(cancelButton)) {
            int result = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure to cancel? You'll need to complete this information later.",
                    "Confirm Cancel",
                    JOptionPane.YES_NO_OPTION
            );
            if (result == JOptionPane.YES_OPTION) {
                viewManagerModel.setActiveView("sign up");
                viewManagerModel.firePropertyChanged();
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        InfoCollectionState state = (InfoCollectionState) evt.getNewValue();
        if (state != null) {
            if (state.getYearOfBirth() != 0) {
                yearOfBirthField.setText(String.valueOf(state.getYearOfBirth()));
            }
            if (state.getWeight() != 0) {
                weightField.setText(String.valueOf(state.getWeight()));
            }
            if (state.getHeight() != 0) {
                heightField.setText(String.valueOf(state.getHeight()));
            }
            if (!state.getGender().isEmpty()) {
                genderField.setSelectedItem(state.getGender());
            }

            // Update error messages
            yearOfBirthErrorField.setText(state.getYearOfBirthError());
            weightErrorField.setText(state.getWeightError());
            heightErrorField.setText(state.getHeightError());

            // Update allergy selections if any
            Set<Allergy> stateAllergies = state.getAllergies();
            allergyCheckboxes.forEach((allergy, checkbox) ->
                    checkbox.setSelected(stateAllergies.contains(allergy))
            );
        }
    }

    public void setInfoCollectionController(InfoCollectionController controller) {
        this.infoCollectionController = controller;
    }

    public String getViewName() {
        return viewName;
    }
}

================
File: view/LabelTextPanel.java
================
package view;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * A panel containing a label and a text field.
 */
class LabelTextPanel extends JPanel {
    LabelTextPanel(JLabel label, JTextField textField) {
        this.add(label);
        this.add(textField);
    }
}

================
File: view/LoggedInView.java
================
package view;

import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import interface_adapter.change_password.ChangePasswordController;
import interface_adapter.change_password.LoggedInState;
import interface_adapter.change_password.LoggedInViewModel;
import interface_adapter.logout.LogoutController;

/**
 * The View for when the user is logged into the program.
 */
public class LoggedInView extends JPanel implements PropertyChangeListener {

    private final String viewName = "logged in";
    private final LoggedInViewModel loggedInViewModel;
    private final JLabel passwordErrorField = new JLabel();
    private ChangePasswordController changePasswordController;
    private LogoutController logoutController;

    private final JLabel username;

    private final JButton logOut;

    private final JTextField passwordInputField = new JTextField(15);
    private final JButton changePassword;

    public LoggedInView(LoggedInViewModel loggedInViewModel) {
        this.loggedInViewModel = loggedInViewModel;
        this.loggedInViewModel.addPropertyChangeListener(this);

        final JLabel title = new JLabel("Logged In Screen");
        title.setAlignmentX(Component.CENTER_ALIGNMENT);

        final LabelTextPanel passwordInfo = new LabelTextPanel(
                new JLabel("Password"), passwordInputField);

        final JLabel usernameInfo = new JLabel("Currently logged in: ");
        username = new JLabel();

        final JPanel buttons = new JPanel();
        logOut = new JButton("Log Out");
        buttons.add(logOut);

        changePassword = new JButton("Change Password");
        buttons.add(changePassword);

        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        passwordInputField.getDocument().addDocumentListener(new DocumentListener() {

            private void documentListenerHelper() {
                final LoggedInState currentState = loggedInViewModel.getState();
                currentState.setPassword(passwordInputField.getText());
                loggedInViewModel.setState(currentState);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                documentListenerHelper();
            }
        });

        changePassword.addActionListener(
                // This creates an anonymous subclass of ActionListener and instantiates it.
                evt -> {
                    if (evt.getSource().equals(changePassword)) {
                        final LoggedInState currentState = loggedInViewModel.getState();

                        this.changePasswordController.execute(
                                currentState.getUsername(),
                                currentState.getPassword()
                        );
                    }
                }
        );

        logOut.addActionListener(
                // This creates an anonymous subclass of ActionListener and instantiates it.
                evt -> {
                    if (evt.getSource().equals(logOut)) {
                        // 1. get the state out of the loggedInViewModel. It contains the username.
                        final LoggedInState currentState = loggedInViewModel.getState();
                        // 2. Execute the logout Controller.
                        this.logoutController.execute(
                                currentState.getUsername()
                        );
                    }
                }
        );

        this.add(title);
        this.add(usernameInfo);
        this.add(username);

        this.add(passwordInfo);
        this.add(passwordErrorField);
        this.add(buttons);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("state")) {
            final LoggedInState state = (LoggedInState) evt.getNewValue();
            username.setText(state.getUsername());
        }
        else if (evt.getPropertyName().equals("password")) {
            final LoggedInState state = (LoggedInState) evt.getNewValue();
            JOptionPane.showMessageDialog(null, "password updated for " + state.getUsername());
        }

    }

    public String getViewName() {
        return viewName;
    }

    public void setChangePasswordController(ChangePasswordController changePasswordController) {
        this.changePasswordController = changePasswordController;
    }

    public void setLogoutController(LogoutController logoutController) {
        this.logoutController = logoutController;
    }
}

================
File: view/LoginView.java
================
package view;

import interface_adapter.ViewManagerModel;
import interface_adapter.login.LoginController;
import interface_adapter.login.LoginState;
import interface_adapter.login.LoginViewModel;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class LoginView extends JPanel implements ActionListener, PropertyChangeListener {
    private final String viewName = "log in";
    private final LoginViewModel loginViewModel;
    private final ViewManagerModel viewManagerModel;  // Add this field

    private final JTextField usernameInputField = new JTextField(15);
    private final JLabel usernameErrorField = new JLabel();
    private final JPasswordField passwordInputField = new JPasswordField(15);
    private final JLabel passwordErrorField = new JLabel();
    private final JButton logIn;
    private final JButton cancel;
    private LoginController loginController;

    public LoginView(LoginViewModel loginViewModel, ViewManagerModel viewManagerModel) {  // Add viewManagerModel parameter
        this.loginViewModel = loginViewModel;
        this.viewManagerModel = viewManagerModel;  // Store viewManagerModel
        this.loginViewModel.addPropertyChangeListener(this);

        // Rest of the constructor remains the same
        JLabel title = new JLabel("Login Screen");
        title.setAlignmentX(Component.CENTER_ALIGNMENT);

        LabelTextPanel usernameInfo = new LabelTextPanel(new JLabel("Username"), usernameInputField);
        LabelTextPanel passwordInfo = new LabelTextPanel(new JLabel("Password"), passwordInputField);

        JPanel buttons = new JPanel();
        logIn = new JButton("Log in");
        buttons.add(logIn);
        cancel = new JButton("Cancel");
        buttons.add(cancel);

        // Add the login button action listener
        logIn.addActionListener(evt -> {
            if (evt.getSource().equals(logIn)) {
                LoginState currentState = loginViewModel.getState();
                loginController.execute(currentState.getUsername(), currentState.getPassword());
            }
        });

        // Add the cancel button action listener
        cancel.addActionListener(this);

        // Set up the text field listeners
        usernameInputField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateState();
            }

            private void updateState() {
                LoginState currentState = loginViewModel.getState();
                currentState.setUsername(usernameInputField.getText());
                loginViewModel.setState(currentState);
            }
        });

        passwordInputField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateState();
            }

            private void updateState() {
                LoginState currentState = loginViewModel.getState();
                currentState.setPassword(new String(passwordInputField.getPassword()));
                loginViewModel.setState(currentState);
            }
        });

        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        this.add(title);
        this.add(usernameInfo);
        this.add(usernameErrorField);
        this.add(passwordInfo);
        this.add(buttons);
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() == cancel) {
            viewManagerModel.setActiveView("sign up");
            viewManagerModel.firePropertyChanged();
            // Clear the input fields
            usernameInputField.setText("");
            passwordInputField.setText("");
        }
    }

    // Rest of the class remains the same
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        LoginState state = (LoginState) evt.getNewValue();
        if (state != null) {
            usernameInputField.setText(state.getUsername());
            passwordInputField.setText(state.getPassword());
            usernameErrorField.setText(state.getLoginError());
        }
    }

    public void setLoginController(LoginController controller) {
        this.loginController = controller;
    }

    public String getViewName() {
        return viewName;
    }
}

================
File: view/NutritionGraphPanel.java
================
package view;

import javax.swing.*;
import java.awt.*;

public class NutritionGraphPanel extends JPanel {
    private int carbsProgress = 30; // Percentage of carbs consumed
    private int proteinsProgress = 60; // Percentage of proteins consumed
    private int fatsProgress = 40; // Percentage of fats consumed

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        // Draw concentric circles
        int centerX = getWidth() / 2;
        int centerY = getHeight() / 2;
        int radius = 100;

        // Draw progress arcs
        drawProgressArc(g2d, centerX, centerY, radius, Color.GREEN, carbsProgress);
        drawProgressArc(g2d, centerX, centerY, radius - 20, Color.BLUE, proteinsProgress);
        drawProgressArc(g2d, centerX, centerY, radius - 40, Color.YELLOW, fatsProgress);

        // Draw labels
        g2d.setColor(Color.BLACK);
        g2d.drawString("Carbs (g): " + carbsProgress + " / 100", 10, 20);
        g2d.drawString("Proteins (g): " + proteinsProgress + " / 100", 10, 40);
        g2d.drawString("Fats (g): " + fatsProgress + " / 100", 10, 60);
    }

    private void drawProgressArc(Graphics2D g2d, int x, int y, int radius, Color color, int progress) {
        g2d.setColor(color);
        g2d.setStroke(new BasicStroke(10));
        g2d.drawArc(x - radius, y - radius, 2 * radius, 2 * radius, 90, -progress * 360 / 100);
    }

    // Update progress values
    public void setProgress(int carbs, int proteins, int fats) {
        this.carbsProgress = carbs;
        this.proteinsProgress = proteins;
        this.fatsProgress = fats;
        repaint(); // Refresh the panel
    }
}

================
File: view/NutritionProgressPanel.java
================
package view;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;

public class NutritionProgressPanel extends JPanel {
    private final ProgressRing calorieRing;
    private final ProgressRing carbsRing;
    private final ProgressRing proteinRing;
    private final ProgressRing fatRing;

    public NutritionProgressPanel() {
        setLayout(new GridBagLayout());
        setPreferredSize(new Dimension(800, 400));

        // Initialize progress rings with different colors
        calorieRing = new ProgressRing(new Color(64, 169, 255), 180);  // Blue
        carbsRing = new ProgressRing(new Color(82, 196, 26), 120);    // Green
        proteinRing = new ProgressRing(new Color(250, 173, 20), 120); // Orange
        fatRing = new ProgressRing(new Color(245, 34, 45), 120);      // Red

        layoutComponents();
    }

    private void layoutComponents() {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 20, 10, 20);

        // Place large calorie ring at top
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 1;
        add(calorieRing, gbc);

        // Place macro rings in a row below
        gbc.gridy = 1;
        gbc.gridwidth = 1;
        gbc.insets = new Insets(30, 20, 10, 20);  // Add more space between rows

        gbc.gridx = 0;
        add(carbsRing, gbc);

        gbc.gridx = 1;
        add(proteinRing, gbc);

        gbc.gridx = 2;
        add(fatRing, gbc);
    }

    public void updateProgress(int caloriePercent, int carbsPercent,
                               int proteinPercent, int fatPercent,
                               String calorieText, String carbsText,
                               String proteinText, String fatText) {
        calorieRing.updateProgress(caloriePercent, "Calories", calorieText);
        carbsRing.updateProgress(carbsPercent, "Carbs", carbsText);
        proteinRing.updateProgress(proteinPercent, "Protein", proteinText);
        fatRing.updateProgress(fatPercent, "Fat", fatText);
        repaint();
    }

    private static class ProgressRing extends JPanel {
        private final Color ringColor;
        private final Timer animationTimer;
        private int currentProgress = 0;
        private int targetProgress = 0;
        private String label = "";
        private String value = "";
        private final int size;
        private static final int ANIMATION_STEPS = 20;
        private static final int ANIMATION_DELAY = 20;

        public ProgressRing(Color color, int size) {
            this.ringColor = color;
            this.size = size;
            setPreferredSize(new Dimension(size, size));
            setOpaque(false);

            animationTimer = new Timer(ANIMATION_DELAY, e -> {
                if (currentProgress != targetProgress) {
                    if (Math.abs(currentProgress - targetProgress) <= ANIMATION_STEPS) {
                        currentProgress = targetProgress;
                    } else {
                        currentProgress += (targetProgress > currentProgress) ?
                                ANIMATION_STEPS : -ANIMATION_STEPS;
                    }
                    repaint();
                }
                if (currentProgress == targetProgress) {
                    ((Timer)e.getSource()).stop();
                }
            });
        }

        public void updateProgress(int newProgress, String newLabel, String newValue) {
            this.targetProgress = newProgress;
            this.label = newLabel;
            this.value = newValue;

            if (!animationTimer.isRunning()) {
                animationTimer.start();
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            configureGraphics(g2d);

            // Calculate dimensions
            int padding = 10;
            int diameter = Math.min(getWidth(), getHeight()) - (padding * 2);
            int x = (getWidth() - diameter) / 2;
            int y = (getHeight() - diameter) / 2;
            int strokeWidth = diameter / 10;

            // Draw shadow
            drawShadow(g2d, x, y, diameter);

            // Draw background circle
            drawBackgroundCircle(g2d, x, y, diameter, strokeWidth);

            // Draw progress arc
            drawProgressArc(g2d, x, y, diameter, strokeWidth);

            // Draw center circle
            drawCenterCircle(g2d, x, y, diameter);

            // Draw text
            drawText(g2d, x, y, diameter);
        }

        private void configureGraphics(Graphics2D g2d) {
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        }

        private void drawShadow(Graphics2D g2d, int x, int y, int diameter) {
            int shadowSize = 4;
            for (int i = shadowSize; i > 0; i--) {
                float alpha = 0.2f / i;
                g2d.setColor(new Color(0f, 0f, 0f, alpha));
                g2d.fill(new Ellipse2D.Double(x - i, y - i, diameter + (2 * i), diameter + (2 * i)));
            }
        }

        private void drawBackgroundCircle(Graphics2D g2d, int x, int y, int diameter, int strokeWidth) {
            g2d.setStroke(new BasicStroke(strokeWidth, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
            g2d.setColor(new Color(230, 230, 230));
            g2d.draw(new Arc2D.Double(
                    x + strokeWidth/2,
                    y + strokeWidth/2,
                    diameter - strokeWidth,
                    diameter - strokeWidth,
                    0, 360, Arc2D.OPEN
            ));
        }

        private void drawProgressArc(Graphics2D g2d, int x, int y, int diameter, int strokeWidth) {
            g2d.setColor(ringColor);
            float arcAngle = -360f * currentProgress / 100f;
            g2d.draw(new Arc2D.Double(
                    x + strokeWidth/2,
                    y + strokeWidth/2,
                    diameter - strokeWidth,
                    diameter - strokeWidth,
                    90, arcAngle, Arc2D.OPEN
            ));
        }

        private void drawCenterCircle(Graphics2D g2d, int x, int y, int diameter) {
            int innerDiameter = diameter - (diameter / 4);
            int innerX = x + (diameter - innerDiameter) / 2;
            int innerY = y + (diameter - innerDiameter) / 2;

            // Create gradient for center circle
            GradientPaint gradient = new GradientPaint(
                    innerX, innerY, Color.WHITE,
                    innerX + innerDiameter, innerY + innerDiameter,
                    new Color(245, 245, 245)
            );
            g2d.setPaint(gradient);
            g2d.fill(new Ellipse2D.Double(innerX, innerY, innerDiameter, innerDiameter));
        }

        private void drawText(Graphics2D g2d, int x, int y, int diameter) {
            g2d.setColor(Color.DARK_GRAY);

            // Draw label
            Font labelFont = new Font("Segoe UI", Font.BOLD, diameter/10);
            g2d.setFont(labelFont);
            FontMetrics labelMetrics = g2d.getFontMetrics();
            g2d.drawString(label,
                    x + (diameter - labelMetrics.stringWidth(label))/2,
                    y + diameter/2 - diameter/8);

            // Draw value
            Font valueFont = new Font("Segoe UI", Font.PLAIN, diameter/12);
            g2d.setFont(valueFont);
            FontMetrics valueMetrics = g2d.getFontMetrics();
            g2d.drawString(value,
                    x + (diameter - valueMetrics.stringWidth(value))/2,
                    y + diameter/2 + diameter/8);

            // Draw percentage
            Font percentFont = new Font("Segoe UI", Font.BOLD, diameter/8);
            g2d.setFont(percentFont);
            String percentText = currentProgress + "%";
            FontMetrics percentMetrics = g2d.getFontMetrics();
            g2d.drawString(percentText,
                    x + (diameter - percentMetrics.stringWidth(percentText))/2,
                    y + diameter/2);
        }
    }
}

================
File: view/SignupView.java
================
package view;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import interface_adapter.signup.SignupController;
import interface_adapter.signup.SignupState;
import interface_adapter.signup.SignupViewModel;

/**
 * The View for the Signup Use Case.
 */
public class SignupView extends JPanel implements ActionListener, PropertyChangeListener {
    private final String viewName = "sign up";

    private final SignupViewModel signupViewModel;
    private final JTextField usernameInputField = new JTextField(15);
    private final JPasswordField passwordInputField = new JPasswordField(15);
    private final JPasswordField repeatPasswordInputField = new JPasswordField(15);
    private SignupController signupController;

    private final JButton signUp;
    private final JButton cancel;
    private final JButton toLogin;

    public SignupView(SignupViewModel signupViewModel) {
        this.signupViewModel = signupViewModel;
        signupViewModel.addPropertyChangeListener(this);

        final JLabel title = new JLabel(SignupViewModel.TITLE_LABEL);
        title.setAlignmentX(Component.CENTER_ALIGNMENT);

        final LabelTextPanel usernameInfo = new LabelTextPanel(
                new JLabel(SignupViewModel.USERNAME_LABEL), usernameInputField);
        final LabelTextPanel passwordInfo = new LabelTextPanel(
                new JLabel(SignupViewModel.PASSWORD_LABEL), passwordInputField);
        final LabelTextPanel repeatPasswordInfo = new LabelTextPanel(
                new JLabel(SignupViewModel.REPEAT_PASSWORD_LABEL), repeatPasswordInputField);

        final JPanel buttons = new JPanel();
        toLogin = new JButton(SignupViewModel.TO_LOGIN_BUTTON_LABEL);
        buttons.add(toLogin);
        signUp = new JButton(SignupViewModel.SIGNUP_BUTTON_LABEL);
        buttons.add(signUp);
        cancel = new JButton(SignupViewModel.CANCEL_BUTTON_LABEL);
        buttons.add(cancel);

        signUp.addActionListener(
                // This creates an anonymous subclass of ActionListener and instantiates it.
                new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        if (evt.getSource().equals(signUp)) {
                            final SignupState currentState = signupViewModel.getState();

                            signupController.execute(
                                    currentState.getUsername(),
                                    currentState.getPassword(),
                                    currentState.getRepeatPassword()
                            );
                        }
                    }
                }
        );

        toLogin.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        signupController.switchToLoginView();
                    }
                }
        );

        cancel.addActionListener(this);

        addUsernameListener();
        addPasswordListener();
        addRepeatPasswordListener();

        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

        this.add(title);
        this.add(usernameInfo);
        this.add(passwordInfo);
        this.add(repeatPasswordInfo);
        this.add(buttons);
    }

    private void addUsernameListener() {
        usernameInputField.getDocument().addDocumentListener(new DocumentListener() {

            private void documentListenerHelper() {
                final SignupState currentState = signupViewModel.getState();
                currentState.setUsername(usernameInputField.getText());
                signupViewModel.setState(currentState);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                documentListenerHelper();
            }
        });
    }

    private void addPasswordListener() {
        passwordInputField.getDocument().addDocumentListener(new DocumentListener() {

            private void documentListenerHelper() {
                final SignupState currentState = signupViewModel.getState();
                currentState.setPassword(new String(passwordInputField.getPassword()));
                signupViewModel.setState(currentState);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                documentListenerHelper();
            }
        });
    }

    private void addRepeatPasswordListener() {
        repeatPasswordInputField.getDocument().addDocumentListener(new DocumentListener() {

            private void documentListenerHelper() {
                final SignupState currentState = signupViewModel.getState();
                currentState.setRepeatPassword(new String(repeatPasswordInputField.getPassword()));
                signupViewModel.setState(currentState);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                documentListenerHelper();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                documentListenerHelper();
            }
        });
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        JOptionPane.showMessageDialog(this, "Cancel not implemented yet.");
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        final SignupState state = (SignupState) evt.getNewValue();
        if (state.getUsernameError() != null) {
            JOptionPane.showMessageDialog(this, state.getUsernameError());
        }
    }

    public String getViewName() {
        return viewName;
    }

    public void setSignupController(SignupController controller) {
        this.signupController = controller;
    }
}

================
File: view/ViewManager.java
================
package view;

import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JPanel;

import interface_adapter.ViewManagerModel;

/**
 * The View Manager for the program. It listens for property change events
 * in the ViewManagerModel and updates which View should be visible.
 */
public class ViewManager implements PropertyChangeListener {
    private final CardLayout cardLayout;
    private final JPanel views;
    private final ViewManagerModel viewManagerModel;

    public ViewManager(JPanel views, CardLayout cardLayout, ViewManagerModel viewManagerModel) {
        this.views = views;
        this.cardLayout = cardLayout;
        this.viewManagerModel = viewManagerModel;
        this.viewManagerModel.addPropertyChangeListener(this);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("state")) {
            final String viewModelName = (String) evt.getNewValue();
            cardLayout.show(views, viewModelName);
        }
    }
}
